{"version":3,"sources":["Square.js","Row.js","Board.js","NotationsInput.js","Buttons.js","SessionNameInput.js","Session.js","SessionsPanel.js","Move.js","MovesHistory.js","Database.js","Panel.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","square","color","piece","src","alt","Row","squares","row","map","id","key","Board","setBoard","hCoordinate","situation","index","this","board","vCoordinates","length","vCoordinate","hCoordinates","coordinate","push","coordinates","initialSet","initialSetType","updateSituation","files","forEach","split","ranks","i","getFiles","file","getRanks","rank","React","Component","NotationsInput","onSubmit","parseNotations","placeholder","value","notations","onChange","updateNotations","autoCorrect","spellCheck","type","Buttons","onClick","toggleSaveSessionPanel","disabled","moves","toggleSessionsPanel","SessionNameInput","visible","saveSession","updateSessionName","sessionName","updateSessionNotes","sessionNotes","dbError","Session","icon","faPlay","updateMoves","session","loadSessionFromArchive","movesHistory","faTrash","deleteSession","title","SessionsPanel","state","sessions","confirm","Move","selected","faded","selectMove","side","notation","MovesHistory","selectedMove","bind","setState","fadeOutMoves","updateSituationByMoveId","resetMovesFade","move","handleKeys","onKeyEvent","cycleMoves","Database","dbName","db","PouchDB","auto_compaction","onError","changes","live","since","on","change","err","doc","successCallback","errorCallback","put","then","response","catch","options","allDocs","self","get","remove","res","Panel","notationParams","notationMinLength","notationMaxLength","notaitionsError","panels","sessionsPanel","saveSessionPanel","testRun","configure","console","log","updateSessionsList","event","target","minLength","maxLength","match","collection","capitalizedSplit","letter","toUpperCase","toLowerCase","join","from","to","preventDefault","trim","allNotationsValid","validateNotation","replace","prettyNotation","capitalize","generateId","moveData","disectNotation","unshift","recordMoves","notationsList","upwardsFromMove","insert","getLatestSessionId","_id","notes","moves_count","moves_history","date_saved","Date","message","status","recreateSessions","dbResult","rows","getAll","include_docs","delete","App","turnMap","piecesMap","turn","whitesOnTop","blacksOnTop","findRankNumber","findFileNumber","bySquareCoordinates","j","situationCopy","rowCopy","squareCopy","history","historyCopy","entry","entryCopy","reversedMoves","slice","reverse","recordMove","copySituation","findSquare","movedPiece","movesHistoryCopy","copyMovesHistory","moveId","toString","findSituation","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dbfec691.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nfunction Square(props) {\n    return (\n        <div className={`Square ${props.square.color === 1 ? 'white' : 'black'}`}>\n            {props.square.piece && <img src={`/images/pieces/${props.square.piece}.png`} alt={props.square.piece} />}\n        </div>\n    );\n}\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\nimport './Row.css';\n\nfunction Row(props) {\n    const squares = props.row.map((square, id) => <Square key={id} square={square} />);\n    return (\n        <div className=\"Row\">\n            {squares}\n        </div>\n    );\n}\n\nexport default Row;","import React from 'react';\nimport Row from './Row'\nimport './Board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setBoard();\n    }\n\n    setBoard() {\n        let hCoordinate = -1, color = 1, situation = [];\n        for (let index = 0; index < this.props.board.vCoordinates.length; index++) {\n            let row = [], vCoordinate = -1; hCoordinate++;\n            for (let index = 0; index < this.props.board.hCoordinates.length; index++) {\n                vCoordinate++; \n                const coordinate = `${this.props.board.vCoordinates[vCoordinate]}${this.props.board.hCoordinates[hCoordinate]}`\n                row.push({coordinates: coordinate, color: color, piece: this.props.initialSet[this.props.initialSetType][coordinate]}); \n                if (index !== this.props.board.hCoordinates.length - 1) \n                    if (color === 1) color = 0; \n                    else color = 1;\n            }\n            situation.push(row); \n        }\n        this.props.updateSituation(situation);\n    }\n\n    getFiles() {\n        let files = [];\n        if (this.props.situation[0]) {\n            const row = this.props.situation[0];\n            row.forEach(square => files.push(square.coordinates.split('')[0]));\n        }\n        return files;\n    }\n\n    getRanks() {\n        let ranks = [];\n        for (let i = 1; i < this.props.situation.length + 1; i++)\n            ranks.push(i);\n        return ranks;\n    }\n\n    render() {\n        return (\n            <div id=\"Board\">\n                <div id=\"Content\">\n                    {this.props.situation.map((row, id) => <Row key={id} row={row} />)}\n                </div>\n                <div id=\"FileStrip\" className=\"strip\">\n                    {this.getFiles().map((file, id) => <div key={id} className=\"File\">{file}</div>)}\n                </div>\n                <div id=\"RankStrip\" className=\"strip\">\n                    {this.getRanks().map((rank, id) => <div key={id} className=\"Rank\">{rank}</div>)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React from 'react';\nimport './NotationsInput.css';\n\n\nfunction NotationsInput(props) {\n    return (\n        <form id=\"Input\" onSubmit={props.parseNotations}> \n            <textarea placeholder=\"Place notations here...\" \n                      value={props.notations} \n                      onChange={props.updateNotations} \n                      autoCorrect=\"false\" spellCheck=\"false\" />\n            <input type=\"submit\" value=\"Parse\" />\n        </form>\n    );\n}\n\nexport default NotationsInput;","import React from 'react';\nimport './Buttons.css';\n\nfunction Buttons(props) {\n    return (\n        <section id=\"Buttons\">\n            <button onClick={props.toggleSaveSessionPanel} disabled={props.moves.length === 0 ? true : false}>Save Session</button>\n            <button onClick={props.toggleSessionsPanel}>View Sessions</button>\n        </section>\n    );\n}\n\nexport default Buttons;","import React from 'react';\nimport './SessionNameInput.css';\n\nfunction SessionNameInput(props) {\n    return (\n        <section id=\"SessionNameInput\" className={props.visible ? 'visible' : null}>\n            <form onSubmit={props.saveSession}>\n                <label>\n                    Name:\n                    <input type=\"text\" onChange={props.updateSessionName} value={props.sessionName} autoCorrect=\"false\" spellCheck=\"false\" />\n                </label>\n                <label>\n                    Notes:\n                    <textarea onChange={props.updateSessionNotes} value={props.sessionNotes} autoCorrect=\"false\" spellCheck=\"false\"></textarea>\n                </label>\n                {props.dbError && <section id=\"dbError\">{props.dbError}</section>}\n                <section id=\"buttons\">\n                    <input type=\"submit\" value=\"Save\" onClick={props.saveSession} />\n                    <button className=\"button\" onClick={props.toggleSaveSessionPanel}>Back</button>\n                </section>\n            </form>\n        </section>\n    );\n}\n\nexport default SessionNameInput;","import React from 'react';\nimport './Session.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay } from '@fortawesome/free-solid-svg-icons';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nfunction Session(props) {\n    return (\n        <div className=\"Session\">\n            <FontAwesomeIcon icon={faPlay} className=\"icon\" onClick={() => {props.updateMoves(props.session.moves); \n                                                                            props.loadSessionFromArchive(props.session.movesHistory, props.session.moves)}} />\n            <FontAwesomeIcon icon={faTrash} className=\"icon danger\" onClick={() => props.deleteSession(props.session.title)} /> \n            <span className=\"title\">{props.session.title}</span> {props.session.moves && <span className=\"number-of-moves\">[{props.session.moves.length} moves]</span>}\n        </div>\n    );\n}\n\nexport default Session;\n","import React from 'react';\nimport './SessionsPanel.css';\nimport Session from './Session'\n\nclass SessionsPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <section id=\"SessionsPanel\" className={this.props.visible ? 'visible' : null}>\n                <section id=\"SessionsList\">\n                    {this.props.sessions.length > 0 && this.props.sessions.map(session => <Session key={session.id} \n\n                                                                                                   session={session}\n\n                                                                                                   updateMoves={this.props.updateMoves}\n                                                                                                   loadSessionFromArchive={this.props.loadSessionFromArchive} \n                                                                                                   toggleSessionsPanel={this.props.toggleSessionsPanel}\n                                                                                                   deleteSession={this.props.deleteSession}\n                                                                                                   confirm={this.props.confirm} />)}\n                    {this.props.sessions.length === 0 && <div id=\"no-sessions\">No stored sessions</div>}\n                </section>\n                <section id=\"Buttons\">\n                    <button className=\"button\" onClick={this.props.toggleSessionsPanel}>Back</button>\n                </section>\n            </section>\n        );\n    }\n}\n\nexport default SessionsPanel;","import React from 'react';\nimport './Move.css';\n\nfunction Move(props) {\n    return (\n        <div className={`Move ${props.selected ? 'selected' : null} ${props.faded ? 'faded' : null}`} \n             onClick={() => {props.selectMove(props.id)}}>\n            <div className=\"TurnId\">#{props.id}</div> <div className={`Side ${props.side}`}></div> {props.notation}\n        </div>\n    );\n}\n\nexport default Move;","import React from 'react';\nimport Move from './Move'\nimport './MovesHistory.css';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nclass MovesHistory extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedMove: -1\n        }\n        this.selectMove = this.selectMove.bind(this);\n    }\n\n    selectMove(id) {\n        if (this.state.selectedMove !== id) {\n            this.setState({selectedMove: id}, () => {\n                if (this.props.moves.length > 1) {\n                    this.props.fadeOutMoves(this.state.selectedMove);\n                    this.props.updateSituationByMoveId(id)\n                }\n            });\n        }\n        else\n            this.setState({selectedMove: id}, () => {\n                this.props.resetMovesFade(); \n                this.props.updateSituationByMoveId(id);\n            });\n    }\n\n    cycleMoves(key) {\n        if (this.props.moves.length > 1 && this.state.selectedMove !== -1) {\n            if (key === 'up') {\n                if (this.state.selectedMove < this.props.moves.length)\n                    this.selectMove(this.state.selectedMove + 1);\n            } else if(key === 'down') {\n                if (this.state.selectedMove > 1)\n                    this.selectMove(this.state.selectedMove - 1);\n            }\n        }\n    }\n    \n    getMoveById(id) {\n        for (let move of this.props.moves)\n            if (move.id === id) return move;\n    }\n\n    render() {\n        return (\n            <section id=\"MovesHistory\">\n                <KeyboardEventHandler handleKeys={['up', 'down']} onKeyEvent={key => this.cycleMoves(key)} />\n                {this.props.moves.map(move => <Move key={move.id} \n                                                    notation={move.notation} \n                                                    id={move.id} \n                                                    side={move.side} \n                                                    situation={move.situation} \n                                                    faded={move.faded}\n                                                    selectMove={this.selectMove}\n                                                    selected={this.state.selectedMove === move.id ? true : false} />)}\n            </section>\n        );\n    }\n}\n\nexport default MovesHistory;","import PouchDB from 'pouchdb-browser';\n\nclass Database {\n    constructor(dbName = 'chess-moves-parser') {\n        this.db = new PouchDB(dbName, {auto_compaction: true});\n    }\n\n    configure(onChange, onError) {\n        this.db.changes({\n            live: true,\n            since: 'now'\n        }).on('change', function (change) {\n            onChange();\n        }).on('error', function (err) {\n            onError();\n        });\n    }\n\n    insert(doc, successCallback, errorCallback) {\n        this.db.put(doc).then(function (response) {\n            successCallback(response);\n        }).catch(function (err) {\n            if (errorCallback) errorCallback(err); \n        });\n    }\n\n    getAll(options, successCallback, errorCallback) {\n        this.db.allDocs(options).then(function (response) {\n            successCallback(response);\n        }).catch(function (err) {\n            if (errorCallback) errorCallback(err); \n        });\n    }\n\n    delete(id, successCallback, errorCallback) {\n        const self = this;\n        this.db.get(id).then(function(doc) {\n           return self.db.remove(doc);\n        }).then(function(res) {\n            successCallback(res);\n        }).catch(function (err) {\n            if (errorCallback) errorCallback(err); \n        });\n    }\n}\n\nexport default Database;","import React from 'react';\nimport NotationsInput from './NotationsInput'\nimport Buttons from './Buttons'\nimport SessionNameInput from './SessionNameInput'\nimport SessionsPanel from './SessionsPanel'\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\nimport Database from './Database';\n\nclass Panel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.notationParams ={\n            notationMinLength: 5,\n            notationMaxLength: 5\n        }\n        this.db = null;\n        this.state = {\n            moves: [],\n            notations: '',\n            notaitionsError: '',\n            dbError: '',\n            panels: {\n                sessionsPanel: {visible: false},\n                saveSessionPanel: {visible: false}\n            },\n            sessions: [],\n            sessionName: '',\n            sessionNotes: '',\n            confirm: true\n        }\n        this.updateNotations = this.updateNotations.bind(this);\n        this.parseNotations = this.parseNotations.bind(this);\n        this.toggleSessionsPanel = this.toggleSessionsPanel.bind(this);\n        this.toggleSaveSessionPanel = this.toggleSaveSessionPanel.bind(this);\n        this.updateSessionName = this.updateSessionName.bind(this);\n        this.updateSessionNotes = this.updateSessionNotes.bind(this);\n        this.fadeOutMoves = this.fadeOutMoves.bind(this);\n        this.resetMovesFade = this.resetMovesFade.bind(this);\n        this.saveSession = this.saveSession.bind(this);\n        this.updateMoves = this.updateMoves.bind(this);\n        this.deleteSession = this.deleteSession.bind(this);\n    }\n\n    componentDidMount() {\n        if (!this.props.testRun) {\n            this.db = new Database();\n            this.db.configure(() => {console.log(`DB_EVENT::There was a change in the local database. Something was inserted, removed or updated.`)},\n                            () => {console.log('DB_EVENT::There was an error during a database operation.');});\n            this.updateSessionsList();\n        }\n    }\n\n    updateNotations(event) {\n        this.setState({notaitionsError: ''});\n        this.setState({notations: event.target.value});\n    }\n\n    validateNotation(notation) {\n        const minLength = this.notationParams.notationMinLength, maxLength = this.notationParams.notationMaxLength;\n        function checkLength() {\n            return notation.length >= minLength && notation.length <= maxLength;\n        }\n        function checkComposition() {\n            return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n        }\n        return checkLength() && checkComposition();\n    }\n\n    generateId(collection) {\n        if (collection.length === 0)\n            return 1;\n        else\n            return collection[0].id + 1;\n    }\n\n    capitalize(notation) {\n        const split = notation.split('');\n        let capitalizedSplit = [];\n        split.forEach((letter, index) => {if (index === 0) capitalizedSplit.push(letter.toUpperCase())\n                                          else capitalizedSplit.push(letter.toLowerCase())});\n        return capitalizedSplit.join('');\n    }\n\n    disectNotation(notation) {\n        const split = notation.split('');\n        return {piece: split[0].toUpperCase(), from: (split[1] + split[2]).toUpperCase(), \n                to: (split[3] + split[4]).toUpperCase()};\n    }\n\n    parseNotations(event) {\n        event.preventDefault();\n        if (this.state.notations.length > 0) {\n            const notations = this.state.notations.trim().split(/\\n/);\n            let allNotationsValid = true;\n            for (let notation of notations)\n                if (!this.validateNotation(notation.replace(/\\s*/g, ''))) {\n                    allNotationsValid = false;\n                    this.setState({notaitionsError: `Invalid notation: '${notation}'`});\n                    break;\n                }\n            if (allNotationsValid) {\n                let moves = [];\n                for (let notation of notations) {\n                    const prettyNotation = this.capitalize(notation.replace(/\\s*/g, ''));\n                    const id = this.generateId(moves);\n                    const moveData = this.disectNotation(notation);\n                    const move = {id: id, notation: prettyNotation, piece: moveData.piece,\n                                  from: moveData.from, to: moveData.to,\n                                  side: id % 2 === 0 ? 'Blacks' : 'Whites', \n                                  faded: false};\n                    moves.unshift(move);\n                }\n                this.props.recordMoves(moves);\n                this.setState({moves: moves}, () => this.setState({notationsList: ''}));\n            }\n        } else {\n            this.setState({notaitionsError: 'Nothing to parse.'});\n        }\n    }\n\n    fadeOutMoves(upwardsFromMove) {\n        this.setState(state => {\n            state.moves.forEach(move => {\n                if (move.id > upwardsFromMove) move.faded = true; \n                else move.faded = false;\n            });\n            return {moves: state.moves}\n        });\n    }\n\n    resetMovesFade() {\n        this.setState(state => {\n            state.moves.forEach(move => move.faded = false);\n            return {moves: state.moves}\n        });\n    }\n\n    toggleSaveSessionPanel(event) {\n        if (event)\n            event.preventDefault();\n        this.setState(state => ({panels: {...state.panels, saveSessionPanel: {visible: !state.panels.saveSessionPanel.visible}}, dbError: ''}));\n    }\n\n    toggleSessionsPanel() {\n        this.setState(state => ({panels: {...state.panels, sessionsPanel: {visible: !state.panels.sessionsPanel.visible}}}));\n    }\n\n    updateSessionName(event) {\n        this.setState({sessionName: event.target.value});\n    }\n\n    updateSessionNotes(event) {\n        this.setState({sessionNotes: event.target.value});\n    }\n\n    getLatestSessionId() {\n        let id = 0;\n        this.state.sessions.forEach(session => {\n            if (session.id > id) id = session.id;\n        });\n        return id;\n    }\n\n    saveSession(event) {\n        event.preventDefault();\n        if (!this.state.sessionName.trim()) {\n            this.setState({dbError: 'Please, give your session a name first.'});\n            return;\n        }\n        this.db.insert({id: this.getLatestSessionId() + 1, \n                        _id: this.state.sessionName, \n                        notes: this.state.sessionNotes, \n                        moves_count: this.state.moves.length, \n                        moves: this.state.moves,\n                        moves_history: this.props.movesHistory,\n                        date_saved: Date()},\n                        () => {\n                            this.setState({sessionName: '', sessionNotes: ''}, () => this.toggleSaveSessionPanel()); \n                            this.updateSessionsList()\n                        }, (err) => {\n                            if (err.message === 'Document update conflict' && err.status === 409) \n                                this.setState({dbError: `Session '${this.state.sessionName}' already exists, choose another name.`});\n                            });\n    }\n\n    updateSessionsList() {\n        function recreateSessions(dbResult) {\n            let sessions = [];\n            dbResult.rows.forEach(row => {\n                sessions.push({id: row.doc.id, \n                               title: row.doc._id, \n                               movesHistory: row.doc.moves_history, \n                               moves: row.doc.moves});\n            });\n            return sessions;\n        }\n        this.db.getAll({include_docs: true}, res => {\n            this.setState({sessions: recreateSessions(res)});\n        });\n    }\n\n    updateMoves(moves) {\n        this.setState(state => ({moves: moves, panels: {...state.panels, sessionsPanel: {visible: false}}}));\n    }\n\n    deleteSession(title) {\n        this.db.delete(title, () => {this.updateSessionsList()});\n    }\n\n    render() {\n        return (\n            <aside id=\"Panel\">\n                <NotationsInput notations={this.state.notations} \n                                updateNotations={this.updateNotations} \n                                parseNotations={this.parseNotations} />\n                {this.state.notaitionsError && <div id=\"Error\">{this.state.notaitionsError}</div>}\n                {this.state.moves.length !== 0 && <h3>Session History</h3>}\n                <MovesHistory moves={this.state.moves} \n                              side={this.props.side} \n                              updateSituationByMoveId={this.props.updateSituationByMoveId} \n                              fadeOutMoves={this.fadeOutMoves} \n                              resetMovesFade={this.resetMovesFade} />\n                <Buttons toggleSessionsPanel={this.toggleSessionsPanel} \n                         toggleSaveSessionPanel={this.toggleSaveSessionPanel} \n                         moves={this.state.moves} />\n                <SessionNameInput visible={this.state.panels.saveSessionPanel.visible} \n                                  toggleSaveSessionPanel={this.toggleSaveSessionPanel} \n                                  sessionName={this.state.sessionName} \n                                  sessionNotes={this.state.sessionNotes} \n                                  updateSessionName={this.updateSessionName} \n                                  updateSessionNotes={this.updateSessionNotes} \n                                  saveSession={this.saveSession}\n                                  dbError={this.state.dbError} />\n                <SessionsPanel visible={this.state.panels.sessionsPanel.visible} \n                               sessions={this.state.sessions} \n                               toggleSessionsPanel={this.toggleSessionsPanel} \n                               loadSessionFromArchive={this.props.loadSessionFromArchive} \n                               updateMoves={this.updateMoves} \n                               deleteSession={this.deleteSession}\n                               confirm={this.state.confirm} />\n            </aside>\n        );\n    }\n}\n\nexport default Panel;","import React from 'react';\nimport Board from './Board';\nimport './App.css';\nimport Panel from './Panel';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.board = {\n      vCoordinates: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n      hCoordinates: ['1', '2', '3', '4', '5', '6', '7', '8'],\n      turnMap: {'Whites': 'white-', 'Blacks': 'black-'},\n      piecesMap: {\n        'R': 'rook',\n        'N': 'knight',\n        'B': 'bishop',\n        'K': 'king',\n        'Q': 'queen',\n        'P': 'pawn'\n      }\n    }\n    this.state = {\n      turn: 'Whites',\n      initialSet: {\n        whitesOnTop: {'A1': 'white-rook', 'B1': 'white-knight', 'C1': 'white-bishop', 'D1': 'white-queen', 'E1': 'white-king', 'F1': 'white-bishop', 'G1': 'white-knight', 'H1': 'white-rook', \n                      'A2': 'white-pawn', 'B2': 'white-pawn', 'C2': 'white-pawn', 'D2': 'white-pawn', 'E2': 'white-pawn', 'F2': 'white-pawn', 'G2': 'white-pawn', 'H2': 'white-pawn',\n                      'A7': 'black-pawn', 'B7': 'black-pawn', 'C7': 'black-pawn', 'D7': 'black-pawn', 'E7': 'black-pawn', 'F7': 'black-pawn', 'G7': 'black-pawn', 'H7': 'black-pawn',\n                      'A8': 'black-rook', 'B8': 'black-knight', 'C8': 'black-bishop', 'D8': 'black-king', 'E8': 'black-queen', 'F8': 'black-bishop', 'G8': 'black-knight', 'H8': 'black-rook'}, \n        \n        blacksOnTop: {'A1': 'black-rook', 'B1': 'black-knight', 'C1': 'black-bishop', 'D1': 'black-queen', 'E1': 'black-king', 'F1': 'black-bishop', 'G1': 'black-knight', 'H1': 'black-rook', \n                      'A2': 'black-pawn', 'B2': 'black-pawn', 'C2': 'black-pawn', 'D2': 'black-pawn', 'E2': 'black-pawn', 'F2': 'black-pawn', 'G2': 'black-pawn', 'H2': 'black-pawn',\n                      'A7': 'white-pawn', 'B7': 'white-pawn', 'C7': 'white-pawn', 'D7': 'white-pawn', 'E7': 'white-pawn', 'F7': 'white-pawn', 'G7': 'white-pawn', 'H7': 'white-pawn',\n                      'A8': 'white-rook', 'B8': 'white-knight', 'C8': 'white-bishop', 'D8': 'white-king', 'E8': 'white-queen', 'F8': 'white-bishop', 'G8': 'white-knight', 'H8': 'white-rook'}, \n      },\n      situation: [],\n      movesHistory: [],\n      initialSetType: 'blacksOnTop'\n    }\n\n    this.recordMoves = this.recordMoves.bind(this);\n    this.updateSituation = this.updateSituation.bind(this);\n    this.findRankNumber = this.findRankNumber.bind(this);\n    this.findFileNumber = this.findFileNumber.bind(this);\n    this.updateSituationByMoveId = this.updateSituationByMoveId.bind(this);\n    this.loadSessionFromArchive = this.loadSessionFromArchive.bind(this);\n  }\n\n  findSquare(situation, coordinates) {\n    for (let row of situation) {\n      for (let square of row) {\n        if (square.coordinates === coordinates) {\n          return square;\n        }\n      }\n    }\n  }\n\n  findRankNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n        if (square.coordinates === bySquareCoordinates) {\n          return i;\n        }\n      }\n    }\n  }\n\n  findFileNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n        if (square.coordinates === bySquareCoordinates) {\n          return j;\n        }\n      }\n    }\n  }\n\n  copySituation(situation) {\n    let situationCopy = [];\n    for (let row of situation) {\n      let rowCopy = [];\n      for (let square of row) {\n        let squareCopy = {};\n        for (let key in square) {\n          squareCopy[key] = square[key];\n        }\n        rowCopy.push(squareCopy);\n      }\n      situationCopy.push(rowCopy);\n    }\n    return situationCopy;\n  }\n\n  copyMovesHistory(history) {\n    let historyCopy = [];\n    if (history.length > 0)\n      for (let entry of history) {\n        let entryCopy = {};\n        for (let key in entry) {\n          entryCopy[key] = entry[key];\n        }\n        historyCopy.push(entryCopy);\n      }\n    return historyCopy;\n  }\n\n  recordMoves(moves) {\n    let i = 0;\n    const self = this;\n    const reversedMoves = moves.slice().reverse();\n    function recordMove(move) {\n      self.setState(state => {\n        let situationCopy = self.copySituation(state.situation);\n        self.findSquare(situationCopy, move.from).piece = null;\n        const movedPiece = `${self.board.turnMap[move.side]}${self.board.piecesMap[move.piece]}`;\n        self.findSquare(situationCopy, move.to).piece = movedPiece;\n        let movesHistoryCopy = self.copyMovesHistory(state.movesHistory);\n        movesHistoryCopy.push({id: `${move.id}`, situation: situationCopy});\n        return {situation: situationCopy, movesHistory: movesHistoryCopy}\n      }, () => {\n        i++;\n        if (i < moves.length) \n          recordMove(reversedMoves[i]);\n      });\n    }\n    recordMove(reversedMoves[i]);\n  }\n\n  findSituation(moveId) {\n    for (let move of this.state.movesHistory)\n      if (move.id === moveId.toString())\n        return move.situation;\n  }\n\n  updateSituation(situation) {\n    this.setState({situation: situation});\n  }\n\n  updateSituationByMoveId(id) {\n    this.updateSituation(this.findSituation(id));\n  }\n\n  loadSessionFromArchive(movesHistory, moves) {\n    this.setState({movesHistory: movesHistory}, () => this.updateSituationByMoveId(moves[0].id));\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Board board={this.board} \n               initialSet={this.state.initialSet}\n               initialSetType={this.state.initialSetType} \n               situation={this.state.situation}\n               updateSituation={this.updateSituation} />\n        <Panel side={this.state.turn}\n               recordMoves={this.recordMoves} \n               situation={this.state.situation}\n               movesHistory={this.state.movesHistory}\n               updateSituationByMoveId={this.updateSituationByMoveId}\n               loadSessionFromArchive={this.loadSessionFromArchive}\n               testRun={false} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}