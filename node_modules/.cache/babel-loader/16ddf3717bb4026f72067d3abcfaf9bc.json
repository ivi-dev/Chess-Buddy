{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-buddy/src/Board.js\";\nimport React from 'react';\nimport Row from './Row';\nimport './Board.css';\n\nfunction Board(props) {\n  // constructor(props) {\n  //     super(props);\n  // }\n  setBoard();\n\n  function setBoard() {\n    let hCoordinate = -1,\n        color = 1,\n        situation = [];\n\n    for (let index = 0; index < props.board.vCoordinates.length; index++) {\n      let row = [],\n          vCoordinate = -1;\n      hCoordinate++;\n\n      for (let index = 0; index < props.board.hCoordinates.length; index++) {\n        vCoordinate++;\n        const coordinate = \"\".concat(props.board.vCoordinates[vCoordinate]).concat(props.board.hCoordinates[hCoordinate]);\n        row.push({\n          coordinates: coordinate,\n          color: color,\n          piece: props.initialSet[props.initialSetType][coordinate]\n        });\n        if (index !== props.board.hCoordinates.length - 1) if (color === 1) color = 0;else color = 1;\n      }\n\n      situation.push(row);\n    }\n\n    props.updateSituation(situation);\n  }\n\n  function getFiles() {\n    let files = [];\n\n    if (props.situation[0]) {\n      const row = props.situation[0];\n      row.forEach(square => files.push(square.coordinates.split('')[0]));\n    }\n\n    return files;\n  }\n\n  function getRanks() {\n    let ranks = [];\n\n    for (let i = 1; i < props.situation.length + 1; i++) ranks.push(i);\n\n    return ranks;\n  } // render() {\n\n\n  return React.createElement(\"div\", {\n    id: \"Board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"Content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, props.situation.map((row, id) => React.createElement(Row, {\n    key: id,\n    row: row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    id: \"FileStrip\",\n    className: \"strip\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, this.getFiles().map((file, id) => React.createElement(\"div\", {\n    key: id,\n    className: \"File\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, file))), React.createElement(\"div\", {\n    id: \"RankStrip\",\n    className: \"strip\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, this.getRanks().map((rank, id) => React.createElement(\"div\", {\n    key: id,\n    className: \"Rank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, rank)))); // }\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-buddy/src/Board.js"],"names":["React","Row","Board","props","setBoard","hCoordinate","color","situation","index","board","vCoordinates","length","row","vCoordinate","hCoordinates","coordinate","push","coordinates","piece","initialSet","initialSetType","updateSituation","getFiles","files","forEach","square","split","getRanks","ranks","i","map","id","file","rank"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Row from './Row'\nimport './Board.css';\n\nfunction Board (props) {\n    // constructor(props) {\n    //     super(props);\n    // }\n    setBoard();\n\n    function setBoard() {\n        let hCoordinate = -1, color = 1, situation = [];\n        for (let index = 0; index < props.board.vCoordinates.length; index++) {\n            let row = [], vCoordinate = -1; hCoordinate++;\n            for (let index = 0; index < props.board.hCoordinates.length; index++) {\n                vCoordinate++; \n                const coordinate = `${props.board.vCoordinates[vCoordinate]}${props.board.hCoordinates[hCoordinate]}`\n                row.push({coordinates: coordinate, color: color, piece: props.initialSet[props.initialSetType][coordinate]}); \n                if (index !== props.board.hCoordinates.length - 1) \n                    if (color === 1) color = 0; \n                    else color = 1;\n            }\n            situation.push(row); \n        }\n        props.updateSituation(situation);\n    }\n\n    function getFiles() {\n        let files = [];\n        if (props.situation[0]) {\n            const row = props.situation[0];\n            row.forEach(square => files.push(square.coordinates.split('')[0]));\n        }\n        return files;\n    }\n\n    function getRanks() {\n        let ranks = [];\n        for (let i = 1; i < props.situation.length + 1; i++)\n            ranks.push(i);\n        return ranks;\n    }\n\n    // render() {\n        return (\n            <div id=\"Board\">\n                <div id=\"Content\">\n                    {props.situation.map((row, id) => <Row key={id} row={row} />)}\n                </div>\n                <div id=\"FileStrip\" className=\"strip\">\n                    {this.getFiles().map((file, id) => <div key={id} className=\"File\">{file}</div>)}\n                </div>\n                <div id=\"RankStrip\" className=\"strip\">\n                    {this.getRanks().map((rank, id) => <div key={id} className=\"Rank\">{rank}</div>)}\n                </div>\n            </div>\n        );\n    // }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}