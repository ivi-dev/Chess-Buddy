{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Board.js\";\nimport React from 'react';\nimport Row from './Row';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dimensions = {\n      width: 8,\n      height: 8\n    };\n    this.vCoordinates = new Set(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']);\n    this.hCoordinates = new Set(['1', '2', '3', '4', '5', '6', '7', '8']);\n    this.initialSet = new Map([[''], ['']]);\n    this.state = {\n      rows: []\n    };\n    this.updateBoard = this.updateBoard.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateBoard();\n  }\n\n  updateBoard() {\n    let hCoordinate = -1,\n        color = 1,\n        rows = [];\n\n    for (let index = 0; index < this.dimensions.height; index++) {\n      let row = [],\n          vCoordinate = -1;\n      hCoordinate++;\n\n      for (let index = 0; index < this.dimensions.width; index++) {\n        vCoordinate++;\n        row.push({\n          coordinates: \"\".concat(this.vCoordinates[vCoordinate]).concat(this.hCoordinates[hCoordinate]),\n          color: color,\n          piece: 'white-queen'\n        });\n        if (index !== this.dimensions.width - 1) if (color === 1) color = 0;else color = 1;\n      }\n\n      rows.push(row);\n    }\n\n    this.setState({\n      rows: rows\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"Board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.state.rows.map((row, id) => React.createElement(Row, {\n      key: id,\n      row: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Board.js"],"names":["React","Row","Board","Component","constructor","props","dimensions","width","height","vCoordinates","Set","hCoordinates","initialSet","Map","state","rows","updateBoard","bind","componentDidMount","hCoordinate","color","index","row","vCoordinate","push","coordinates","piece","setState","render","map","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,UAAL,GAAkB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAlB;AACA,SAAKC,YAAL,GAAoB,IAAIC,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAAR,CAApB;AACA,SAAKC,YAAL,GAAoB,IAAID,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAAR,CAApB;AACA,SAAKE,UAAL,GAAkB,IAAIC,GAAJ,CAAQ,CAAC,CAAC,EAAD,CAAD,EAAS,CAAC,EAAD,CAAT,CAAR,CAAlB;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb;AAIA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKF,WAAL;AACH;;AAEDA,EAAAA,WAAW,GAAG;AACV,QAAIG,WAAW,GAAG,CAAC,CAAnB;AAAA,QAAsBC,KAAK,GAAG,CAA9B;AAAA,QAAiCL,IAAI,GAAG,EAAxC;;AACA,SAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKf,UAAL,CAAgBE,MAA5C,EAAoDa,KAAK,EAAzD,EAA6D;AACzD,UAAIC,GAAG,GAAG,EAAV;AAAA,UAAcC,WAAW,GAAG,CAAC,CAA7B;AAAgCJ,MAAAA,WAAW;;AAC3C,WAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKf,UAAL,CAAgBC,KAA5C,EAAmDc,KAAK,EAAxD,EAA4D;AACxDE,QAAAA,WAAW;AACXD,QAAAA,GAAG,CAACE,IAAJ,CAAS;AAACC,UAAAA,WAAW,YAAK,KAAKhB,YAAL,CAAkBc,WAAlB,CAAL,SAAsC,KAAKZ,YAAL,CAAkBQ,WAAlB,CAAtC,CAAZ;AACCC,UAAAA,KAAK,EAAEA,KADR;AACeM,UAAAA,KAAK,EAAE;AADtB,SAAT;AAEA,YAAIL,KAAK,KAAK,KAAKf,UAAL,CAAgBC,KAAhB,GAAwB,CAAtC,EACI,IAAIa,KAAK,KAAK,CAAd,EAAiBA,KAAK,GAAG,CAAR,CAAjB,KACKA,KAAK,GAAG,CAAR;AACZ;;AACDL,MAAAA,IAAI,CAACS,IAAL,CAAUF,GAAV;AACH;;AACD,SAAKK,QAAL,CAAc;AAACZ,MAAAA,IAAI,EAAEA;AAAP,KAAd;AACH;;AAEDa,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKd,KAAL,CAAWC,IAAX,CAAgBc,GAAhB,CAAoB,CAACP,GAAD,EAAMQ,EAAN,KAAa,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,EAAV;AAAc,MAAA,GAAG,EAAER,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjC,CADL,CADJ,CADJ;AAOH;;AA3C+B;;AA8CpC,eAAepB,KAAf","sourcesContent":["import React from 'react';\nimport Row from './Row'\nimport './Board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dimensions = { width: 8, height: 8 }\n        this.vCoordinates = new Set(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']);\n        this.hCoordinates = new Set(['1', '2', '3', '4', '5', '6', '7', '8']);\n        this.initialSet = new Map([['', ], ['', ]]);\n        this.state = {\n            rows: []\n        }\n\n        this.updateBoard = this.updateBoard.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateBoard();\n    }\n\n    updateBoard() {\n        let hCoordinate = -1, color = 1, rows = [];\n        for (let index = 0; index < this.dimensions.height; index++) {\n            let row = [], vCoordinate = -1; hCoordinate++;\n            for (let index = 0; index < this.dimensions.width; index++) {\n                vCoordinate++;\n                row.push({coordinates: `${this.vCoordinates[vCoordinate]}${this.hCoordinates[hCoordinate]}`, \n                          color: color, piece: 'white-queen'}); \n                if (index !== this.dimensions.width - 1) \n                    if (color === 1) color = 0; \n                    else color = 1;\n            }\n            rows.push(row); \n        }\n        this.setState({rows: rows});\n    }\n\n    render() {\n        return (\n            <div id=\"Board\">\n                <div className=\"Content\">\n                    {this.state.rows.map((row, id) => <Row key={id} row={row} />)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}