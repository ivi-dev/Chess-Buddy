{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport './App.css';\nimport Panel from './Panel';\nimport TurnIndicator from './TurnIndicator';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.board = {\n      vCoordinates: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n      hCoordinates: ['1', '2', '3', '4', '5', '6', '7', '8'],\n      dimensions: {\n        width: 8,\n        height: 8\n      }\n    };\n    this.turnMap = {\n      'Whites': 'white-',\n      'Blacks': 'black-'\n    };\n    this.piecesMap = {\n      'R': 'rook',\n      'N': 'knight',\n      'B': 'bishop',\n      'K': 'king',\n      'Q': 'queen',\n      'P': 'pawn'\n    };\n    this.piecesMovements = {\n      pawn: {\n        forward: {\n          by: 1\n        },\n        back: {\n          by: null\n        },\n        left: {\n          by: 1,\n          specialCase: true\n        },\n        right: {\n          by: null\n        }\n      },\n      rook: {\n        forward: {\n          by: 1\n        },\n        back: {\n          by: null\n        },\n        left: {\n          by: null\n        },\n        right: {\n          by: null\n        }\n      },\n      knight: {\n        file: [this.board.dimensions.height, this.board.dimensions.height],\n        rank: [this.board.dimensions.width, -this.board.dimensions.width]\n      }\n    };\n    this.state = {\n      turn: 'Whites',\n      initialSet: {\n        whitesOnTop: {\n          'A1': 'white-rook',\n          'B1': 'white-knight',\n          'C1': 'white-bishop',\n          'D1': 'white-queen',\n          'E1': 'white-king',\n          'F1': 'white-bishop',\n          'G1': 'white-knight',\n          'H1': 'white-rook',\n          'A2': 'white-pawn',\n          'B2': 'white-pawn',\n          'C2': 'white-pawn',\n          'D2': 'white-pawn',\n          'E2': 'white-pawn',\n          'F2': 'white-pawn',\n          'G2': 'white-pawn',\n          'H2': 'white-pawn',\n          'A7': 'black-pawn',\n          'B7': 'black-pawn',\n          'C7': 'black-pawn',\n          'D7': 'black-pawn',\n          'E7': 'black-pawn',\n          'F7': 'black-pawn',\n          'G7': 'black-pawn',\n          'H7': 'black-pawn',\n          'A8': 'black-rook',\n          'B8': 'black-knight',\n          'C8': 'black-bishop',\n          'D8': 'black-king',\n          'E8': 'black-queen',\n          'F8': 'black-bishop',\n          'G8': 'black-knight',\n          'H8': 'black-rook'\n        },\n        blacksOnTop: {\n          'A1': 'black-rook',\n          'B1': 'black-knight',\n          'C1': 'black-bishop',\n          'D1': 'black-queen',\n          'E1': 'black-king',\n          'F1': 'black-bishop',\n          'G1': 'black-knight',\n          'H1': 'black-rook',\n          'A2': 'black-pawn',\n          'B2': 'black-pawn',\n          'C2': 'black-pawn',\n          'D2': 'black-pawn',\n          'E2': 'black-pawn',\n          'F2': 'black-pawn',\n          'G2': 'black-pawn',\n          'H2': 'black-pawn',\n          'A7': 'white-pawn',\n          'B7': 'white-pawn',\n          'C7': 'white-pawn',\n          'D7': 'white-pawn',\n          'E7': 'white-pawn',\n          'F7': 'white-pawn',\n          'G7': 'white-pawn',\n          'H7': 'white-pawn',\n          'A8': 'white-rook',\n          'B8': 'white-knight',\n          'C8': 'white-bishop',\n          'D8': 'white-king',\n          'E8': 'white-queen',\n          'F8': 'white-bishop',\n          'G8': 'white-knight',\n          'H8': 'white-rook'\n        }\n      },\n      situation: [],\n      initialSetType: 'blacksOnTop'\n    };\n    this.makeMove = this.makeMove.bind(this);\n    this.updateSituation = this.updateSituation.bind(this);\n  }\n\n  findSquare(coordinates) {\n    for (let row of this.state.situation) {\n      for (let square of row) {\n        if (square.coordinates === coordinates) {\n          return square;\n        }\n      }\n    }\n  }\n\n  makeMove(move) {\n    this.setState(state => {\n      this.findSquare(move.from.toUpperCase()).piece = null;\n      const movedPiece = \"\".concat(this.turnMap[this.state.turn]).concat(this.piecesMap[move.piece]);\n      this.findSquare(move.to.toUpperCase()).piece = movedPiece;\n      return {\n        situation: state.situation\n      };\n    }, () => this.setState({\n      turn: this.state.turn === 'Whites' ? 'Blacks' : 'Whites'\n    }));\n  }\n\n  updateSituation(situation) {\n    this.setState({\n      situation: situation\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.board,\n      initialSet: this.state.initialSet,\n      initialSetType: this.state.initialSetType,\n      situation: this.state.situation,\n      updateSituation: this.updateSituation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(TurnIndicator, {\n      side: this.state.turn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Panel, {\n      side: this.state.turn,\n      makeMove: this.makeMove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/App.js"],"names":["React","Board","Panel","TurnIndicator","App","Component","constructor","props","board","vCoordinates","hCoordinates","dimensions","width","height","turnMap","piecesMap","piecesMovements","pawn","forward","by","back","left","specialCase","right","rook","knight","file","rank","state","turn","initialSet","whitesOnTop","blacksOnTop","situation","initialSetType","makeMove","bind","updateSituation","findSquare","coordinates","row","square","move","setState","from","toUpperCase","piece","movedPiece","to","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport './App.css';\nimport Panel from './Panel';\nimport TurnIndicator from './TurnIndicator';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.board = {\n      vCoordinates: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n      hCoordinates: ['1', '2', '3', '4', '5', '6', '7', '8'],\n      dimensions: { width: 8, height: 8 }\n    }\n    this.turnMap = {'Whites': 'white-', 'Blacks': 'black-'}\n    this.piecesMap = {\n      'R': 'rook',\n      'N': 'knight',\n      'B': 'bishop',\n      'K': 'king',\n      'Q': 'queen',\n      'P': 'pawn'\n    }\n    this.piecesMovements = {\n      pawn: {\n        forward: {by: 1}, \n        back: {by: null}, \n        left: {by: 1, specialCase: true}, \n        right: {by: null}\n      },\n      rook: {\n        forward: {by: 1}, \n        back: {by: null}, \n        left: {by: null}, \n        right: {by: null}\n      },\n      knight: {\n        file: [this.board.dimensions.height, this.board.dimensions.height], rank: [this.board.dimensions.width, -this.board.dimensions.width]\n      }\n    }\n    this.state = {\n      turn: 'Whites',\n      initialSet: {\n        whitesOnTop: {'A1': 'white-rook', 'B1': 'white-knight', 'C1': 'white-bishop', 'D1': 'white-queen', 'E1': 'white-king', 'F1': 'white-bishop', 'G1': 'white-knight', 'H1': 'white-rook', \n                      'A2': 'white-pawn', 'B2': 'white-pawn', 'C2': 'white-pawn', 'D2': 'white-pawn', 'E2': 'white-pawn', 'F2': 'white-pawn', 'G2': 'white-pawn', 'H2': 'white-pawn',\n                      'A7': 'black-pawn', 'B7': 'black-pawn', 'C7': 'black-pawn', 'D7': 'black-pawn', 'E7': 'black-pawn', 'F7': 'black-pawn', 'G7': 'black-pawn', 'H7': 'black-pawn',\n                      'A8': 'black-rook', 'B8': 'black-knight', 'C8': 'black-bishop', 'D8': 'black-king', 'E8': 'black-queen', 'F8': 'black-bishop', 'G8': 'black-knight', 'H8': 'black-rook'}, \n        \n        blacksOnTop: {'A1': 'black-rook', 'B1': 'black-knight', 'C1': 'black-bishop', 'D1': 'black-queen', 'E1': 'black-king', 'F1': 'black-bishop', 'G1': 'black-knight', 'H1': 'black-rook', \n                      'A2': 'black-pawn', 'B2': 'black-pawn', 'C2': 'black-pawn', 'D2': 'black-pawn', 'E2': 'black-pawn', 'F2': 'black-pawn', 'G2': 'black-pawn', 'H2': 'black-pawn',\n                      'A7': 'white-pawn', 'B7': 'white-pawn', 'C7': 'white-pawn', 'D7': 'white-pawn', 'E7': 'white-pawn', 'F7': 'white-pawn', 'G7': 'white-pawn', 'H7': 'white-pawn',\n                      'A8': 'white-rook', 'B8': 'white-knight', 'C8': 'white-bishop', 'D8': 'white-king', 'E8': 'white-queen', 'F8': 'white-bishop', 'G8': 'white-knight', 'H8': 'white-rook'}, \n      },\n      situation: [],\n      initialSetType: 'blacksOnTop'\n    }\n\n    this.makeMove = this.makeMove.bind(this);\n    this.updateSituation = this.updateSituation.bind(this);\n  }\n\n  findSquare(coordinates) {\n    for (let row of this.state.situation) {\n      for (let square of row) {\n        if (square.coordinates === coordinates) {\n          return square;\n        }\n      }\n    }\n  }\n\n  makeMove(move) {\n    this.setState(state => {\n      this.findSquare(move.from.toUpperCase()).piece = null;\n      const movedPiece = `${this.turnMap[this.state.turn]}${this.piecesMap[move.piece]}`;\n      this.findSquare(move.to.toUpperCase()).piece = movedPiece;\n      return {situation: state.situation};\n    }, () => this.setState({turn: this.state.turn === 'Whites' ? 'Blacks' : 'Whites'}));\n  }\n\n  updateSituation(situation) {\n    this.setState({situation: situation});\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Board board={this.board} \n               initialSet={this.state.initialSet}\n               initialSetType={this.state.initialSetType} \n               situation={this.state.situation}\n               updateSituation={this.updateSituation} />\n        <TurnIndicator side={this.state.turn} />\n        <Panel side={this.state.turn} makeMove={this.makeMove} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}