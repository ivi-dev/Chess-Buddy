{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-buddy/src/Board.js\";\nimport React from 'react';\nimport Row from './Row';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.setBoard();\n  }\n\n  componentDidMount() {// this.setBoard();\n  }\n\n  setBoard() {\n    let hCoordinate = -1,\n        color = 1,\n        situation = [];\n\n    for (let index = 0; index < this.props.board.vCoordinates.length; index++) {\n      let row = [],\n          vCoordinate = -1;\n      hCoordinate++;\n\n      for (let index = 0; index < this.props.board.hCoordinates.length; index++) {\n        vCoordinate++;\n        const coordinate = \"\".concat(this.props.board.vCoordinates[vCoordinate]).concat(this.props.board.hCoordinates[hCoordinate]);\n        row.push({\n          coordinates: coordinate,\n          color: color,\n          piece: this.props.initialSet[this.props.initialSetType][coordinate]\n        });\n        if (index !== this.props.board.hCoordinates.length - 1) if (color === 1) color = 0;else color = 1;\n      }\n\n      situation.push(row);\n    }\n\n    this.props.updateSituation(situation);\n  }\n\n  getFiles() {\n    let files = [];\n\n    if (this.props.situation[0]) {\n      const row = this.props.situation[0];\n      row.forEach(square => files.push(square.coordinates.split('')[0]));\n    }\n\n    return files;\n  }\n\n  getRanks() {\n    let ranks = [];\n\n    for (let i = 1; i < this.props.situation.length + 1; i++) ranks.push(i);\n\n    return ranks;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"Board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.props.situation.map((row, id) => React.createElement(Row, {\n      key: id,\n      row: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      id: \"FileStrip\",\n      className: \"strip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.getFiles().map((file, id) => React.createElement(\"div\", {\n      key: id,\n      className: \"File\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, file))), React.createElement(\"div\", {\n      id: \"RankStrip\",\n      className: \"strip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.getRanks().map((rank, id) => React.createElement(\"div\", {\n      key: id,\n      className: \"Rank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, rank))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-buddy/src/Board.js"],"names":["React","Row","Board","Component","constructor","props","state","setBoard","componentDidMount","hCoordinate","color","situation","index","board","vCoordinates","length","row","vCoordinate","hCoordinates","coordinate","push","coordinates","piece","initialSet","initialSetType","updateSituation","getFiles","files","forEach","square","split","getRanks","ranks","i","render","map","id","file","rank"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Row from './Row'\nimport './Board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        }\n        this.setBoard();\n\n    }\n\n    componentDidMount() {\n        // this.setBoard();\n    }\n\n    setBoard() {\n        let hCoordinate = -1, color = 1, situation = [];\n        for (let index = 0; index < this.props.board.vCoordinates.length; index++) {\n            let row = [], vCoordinate = -1; hCoordinate++;\n            for (let index = 0; index < this.props.board.hCoordinates.length; index++) {\n                vCoordinate++; \n                const coordinate = `${this.props.board.vCoordinates[vCoordinate]}${this.props.board.hCoordinates[hCoordinate]}`\n                row.push({coordinates: coordinate, color: color, piece: this.props.initialSet[this.props.initialSetType][coordinate]}); \n                if (index !== this.props.board.hCoordinates.length - 1) \n                    if (color === 1) color = 0; \n                    else color = 1;\n            }\n            situation.push(row); \n        }\n        this.props.updateSituation(situation);\n    }\n\n    getFiles() {\n        let files = [];\n        if (this.props.situation[0]) {\n            const row = this.props.situation[0];\n            row.forEach(square => files.push(square.coordinates.split('')[0]));\n        }\n        return files;\n    }\n\n    getRanks() {\n        let ranks = [];\n        for (let i = 1; i < this.props.situation.length + 1; i++)\n            ranks.push(i);\n        return ranks;\n    }\n\n    render() {\n        return (\n            <div id=\"Board\">\n                <div id=\"Content\">\n                    {this.props.situation.map((row, id) => <Row key={id} row={row} />)}\n                </div>\n                <div id=\"FileStrip\" className=\"strip\">\n                    {this.getFiles().map((file, id) => <div key={id} className=\"File\">{file}</div>)}\n                </div>\n                <div id=\"RankStrip\" className=\"strip\">\n                    {this.getRanks().map((rank, id) => <div key={id} className=\"Rank\">{rank}</div>)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}