{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Board.js\";\nimport React from 'react';\nimport Square from './Square';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dimensions = {\n      width: 8,\n      height: 8\n    };\n    this.state = {\n      squares: []\n    };\n  }\n\n  componentDidMount() {\n    this.prepareSquares();\n  }\n\n  prepareSquares() {\n    let squareColor = 1,\n        squares = [];\n\n    for (let index = 0; index < this.dimensions.height; index++) {\n      squares.push(squareColor);\n      if (squareColor === 1) squareColor = 0;else squareColor = 1;\n    }\n\n    this.setState({\n      squares: squares\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"Board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, this.state.squares.map((square, id) => React.createElement(Square, {\n      key: id,\n      color: square === 1 ? 'white' : 'black',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Board.js"],"names":["React","Square","Board","Component","constructor","props","dimensions","width","height","state","squares","componentDidMount","prepareSquares","squareColor","index","push","setState","render","map","square","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,UAAL,GAAkB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAlB;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,cAAL;AACH;;AAEDA,EAAAA,cAAc,GAAG;AACb,QAAIC,WAAW,GAAG,CAAlB;AAAA,QAAqBH,OAAO,GAAG,EAA/B;;AACA,SAAK,IAAII,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKR,UAAL,CAAgBE,MAA5C,EAAoDM,KAAK,EAAzD,EAA6D;AACzDJ,MAAAA,OAAO,CAACK,IAAR,CAAaF,WAAb;AAA2B,UAAIA,WAAW,KAAK,CAApB,EAAuBA,WAAW,GAAG,CAAd,CAAvB,KAA6CA,WAAW,GAAG,CAAd;AAC3E;;AACD,SAAKG,QAAL,CAAc;AAACN,MAAAA,OAAO,EAAEA;AAAV,KAAd;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKR,KAAL,CAAWC,OAAX,CAAmBQ,GAAnB,CAAuB,CAACC,MAAD,EAASC,EAAT,KAAgB,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,EAAb;AAAiB,MAAA,KAAK,EAAED,MAAM,KAAK,CAAX,GAAe,OAAf,GAAyB,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvC,CADL,CADJ;AAKH;;AA3B+B;;AA8BpC,eAAejB,KAAf","sourcesContent":["import React from 'react';\nimport Square from './Square'\nimport './Board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dimensions = { width: 8, height: 8 }\n        this.state = {\n            squares: []\n        }\n    }\n\n    componentDidMount() {\n        this.prepareSquares();\n    }\n\n    prepareSquares() {\n        let squareColor = 1, squares = [];\n        for (let index = 0; index < this.dimensions.height; index++) {\n            squares.push(squareColor); if (squareColor === 1) squareColor = 0; else squareColor = 1;\n        }\n        this.setState({squares: squares});\n    }\n\n    render() {\n        return (\n            <div id=\"Board\">\n                {this.state.squares.map((square, id) => <Square key={id} color={square === 1 ? 'white' : 'black'} />)}\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}