{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport './App.css';\nimport Panel from './Panel';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.board = {\n      vCoordinates: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n      hCoordinates: ['1', '2', '3', '4', '5', '6', '7', '8'],\n      dimensions: {\n        width: 8,\n        height: 8\n      }\n    };\n    this.turnMap = {\n      'Whites': 'white-',\n      'Blacks': 'black-'\n    };\n    this.piecesMap = {\n      'R': 'rook',\n      'N': 'knight',\n      'B': 'bishop',\n      'K': 'king',\n      'Q': 'queen',\n      'P': 'pawn'\n    };\n    this.state = {\n      turn: 'Whites',\n      board: {\n        initialSet: {\n          whitesOnTop: {\n            'A1': 'white-rook',\n            'B1': 'white-knight',\n            'C1': 'white-bishop',\n            'D1': 'white-queen',\n            'E1': 'white-king',\n            'F1': 'white-bishop',\n            'G1': 'white-knight',\n            'H1': 'white-rook',\n            'A2': 'white-pawn',\n            'B2': 'white-pawn',\n            'C2': 'white-pawn',\n            'D2': 'white-pawn',\n            'E2': 'white-pawn',\n            'F2': 'white-pawn',\n            'G2': 'white-pawn',\n            'H2': 'white-pawn',\n            'A7': 'black-pawn',\n            'B7': 'black-pawn',\n            'C7': 'black-pawn',\n            'D7': 'black-pawn',\n            'E7': 'black-pawn',\n            'F7': 'black-pawn',\n            'G7': 'black-pawn',\n            'H7': 'black-pawn',\n            'A8': 'black-rook',\n            'B8': 'black-knight',\n            'C8': 'black-bishop',\n            'D8': 'black-king',\n            'E8': 'black-queen',\n            'F8': 'black-bishop',\n            'G8': 'black-knight',\n            'H8': 'black-rook'\n          },\n          blacksOnTop: {\n            'A1': 'black-rook',\n            'B1': 'black-knight',\n            'C1': 'black-bishop',\n            'D1': 'black-queen',\n            'E1': 'black-king',\n            'F1': 'black-bishop',\n            'G1': 'black-knight',\n            'H1': 'black-rook',\n            'A2': 'black-pawn',\n            'B2': 'black-pawn',\n            'C2': 'black-pawn',\n            'D2': 'black-pawn',\n            'E2': 'black-pawn',\n            'F2': 'black-pawn',\n            'G2': 'black-pawn',\n            'H2': 'black-pawn',\n            'A7': 'white-pawn',\n            'B7': 'white-pawn',\n            'C7': 'white-pawn',\n            'D7': 'white-pawn',\n            'E7': 'white-pawn',\n            'F7': 'white-pawn',\n            'G7': 'white-pawn',\n            'H7': 'white-pawn',\n            'A8': 'white-rook',\n            'B8': 'white-knight',\n            'C8': 'white-bishop',\n            'D8': 'white-king',\n            'E8': 'white-queen',\n            'F8': 'white-bishop',\n            'G8': 'white-knight',\n            'H8': 'white-rook'\n          }\n        },\n        initialSetType: 'blacksOnTop',\n        situation: [],\n        movesHistory: []\n      }\n    };\n    this.recordMoves = this.recordMoves.bind(this);\n    this.updateSituation = this.updateSituation.bind(this);\n    this.findRankNumber = this.findRankNumber.bind(this);\n    this.findFileNumber = this.findFileNumber.bind(this);\n    this.updateSituationByMoveId = this.updateSituationByMoveId.bind(this);\n    this.loadSessionFromArchive = this.loadSessionFromArchive.bind(this);\n  }\n\n  findSquare(situation, coordinates) {\n    for (let row of situation) {\n      for (let square of row) {\n        if (square.coordinates === coordinates) {\n          return square;\n        }\n      }\n    }\n  }\n\n  findRankNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n\n        if (square.coordinates === bySquareCoordinates) {\n          return i;\n        }\n      }\n    }\n  }\n\n  findFileNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n\n        if (square.coordinates === bySquareCoordinates) {\n          return j;\n        }\n      }\n    }\n  }\n\n  copySituation(situation) {\n    let situationCopy = [];\n\n    for (let row of situation) {\n      let rowCopy = [];\n\n      for (let square of row) {\n        let squareCopy = {};\n\n        for (let key in square) {\n          squareCopy[key] = square[key];\n        }\n\n        rowCopy.push(squareCopy);\n      }\n\n      situationCopy.push(rowCopy);\n    }\n\n    return situationCopy;\n  }\n\n  copyMovesHistory(history) {\n    let historyCopy = [];\n    if (history.length > 0) for (let entry of history) {\n      let entryCopy = {};\n\n      for (let key in entry) {\n        entryCopy[key] = entry[key];\n      }\n\n      historyCopy.push(entryCopy);\n    }\n    return historyCopy;\n  }\n\n  recordMoves(moves) {\n    let i = 0;\n    const self = this;\n    const reversedMoves = moves.slice().reverse();\n\n    function recordMove(move) {\n      self.setState(state => {\n        let situationCopy = self.copySituation(state.situation);\n        self.findSquare(situationCopy, move.from).piece = null;\n        const movedPiece = \"\".concat(self.turnMap[move.side]).concat(self.piecesMap[move.piece]);\n        self.findSquare(situationCopy, move.to).piece = movedPiece;\n        let movesHistoryCopy = self.copyMovesHistory(state.movesHistory);\n        movesHistoryCopy.push({\n          id: \"\".concat(move.id),\n          situation: situationCopy\n        });\n        return {\n          situation: situationCopy,\n          movesHistory: movesHistoryCopy\n        };\n      }, () => {\n        i++;\n        if (i < moves.length) recordMove(reversedMoves[i]);\n      });\n    }\n\n    recordMove(reversedMoves[i]);\n  }\n\n  findSituation(moveId) {\n    for (let move of this.state.movesHistory) if (move.id === moveId.toString()) return move.situation;\n  }\n\n  updateSituation(situation) {\n    this.setState({\n      situation: situation\n    });\n  }\n\n  updateSituationByMoveId(id) {\n    this.updateSituation(this.findSituation(id));\n  }\n\n  loadSessionFromArchive(movesHistory, moves) {\n    this.setState({\n      movesHistory: movesHistory\n    }, () => this.updateSituationByMoveId(moves[0].id));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.board,\n      boardSettings: this.state.board,\n      situation: this.state.situation,\n      updateSituation: this.updateSituation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(Panel, {\n      side: this.state.turn,\n      recordMoves: this.recordMoves,\n      situation: this.state.situation,\n      movesHistory: this.state.movesHistory,\n      updateSituationByMoveId: this.updateSituationByMoveId,\n      loadSessionFromArchive: this.loadSessionFromArchive,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/App.js"],"names":["React","Board","Panel","App","Component","constructor","props","board","vCoordinates","hCoordinates","dimensions","width","height","turnMap","piecesMap","state","turn","initialSet","whitesOnTop","blacksOnTop","initialSetType","situation","movesHistory","recordMoves","bind","updateSituation","findRankNumber","findFileNumber","updateSituationByMoveId","loadSessionFromArchive","findSquare","coordinates","row","square","bySquareCoordinates","i","length","j","copySituation","situationCopy","rowCopy","squareCopy","key","push","copyMovesHistory","history","historyCopy","entry","entryCopy","moves","self","reversedMoves","slice","reverse","recordMove","move","setState","from","piece","movedPiece","side","to","movesHistoryCopy","id","findSituation","moveId","toString","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport './App.css';\nimport Panel from './Panel';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.board = {\n      vCoordinates: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n      hCoordinates: ['1', '2', '3', '4', '5', '6', '7', '8'],\n      dimensions: { width: 8, height: 8 }\n    }\n    this.turnMap = {'Whites': 'white-', 'Blacks': 'black-'}\n    this.piecesMap = {\n      'R': 'rook',\n      'N': 'knight',\n      'B': 'bishop',\n      'K': 'king',\n      'Q': 'queen',\n      'P': 'pawn'\n    }\n    this.state = {\n      turn: 'Whites',\n      board: {\n        initialSet: {\n          whitesOnTop: {'A1': 'white-rook', 'B1': 'white-knight', 'C1': 'white-bishop', 'D1': 'white-queen', 'E1': 'white-king', 'F1': 'white-bishop', 'G1': 'white-knight', 'H1': 'white-rook', \n                        'A2': 'white-pawn', 'B2': 'white-pawn', 'C2': 'white-pawn', 'D2': 'white-pawn', 'E2': 'white-pawn', 'F2': 'white-pawn', 'G2': 'white-pawn', 'H2': 'white-pawn',\n                        'A7': 'black-pawn', 'B7': 'black-pawn', 'C7': 'black-pawn', 'D7': 'black-pawn', 'E7': 'black-pawn', 'F7': 'black-pawn', 'G7': 'black-pawn', 'H7': 'black-pawn',\n                        'A8': 'black-rook', 'B8': 'black-knight', 'C8': 'black-bishop', 'D8': 'black-king', 'E8': 'black-queen', 'F8': 'black-bishop', 'G8': 'black-knight', 'H8': 'black-rook'}, \n          \n          blacksOnTop: {'A1': 'black-rook', 'B1': 'black-knight', 'C1': 'black-bishop', 'D1': 'black-queen', 'E1': 'black-king', 'F1': 'black-bishop', 'G1': 'black-knight', 'H1': 'black-rook', \n                        'A2': 'black-pawn', 'B2': 'black-pawn', 'C2': 'black-pawn', 'D2': 'black-pawn', 'E2': 'black-pawn', 'F2': 'black-pawn', 'G2': 'black-pawn', 'H2': 'black-pawn',\n                        'A7': 'white-pawn', 'B7': 'white-pawn', 'C7': 'white-pawn', 'D7': 'white-pawn', 'E7': 'white-pawn', 'F7': 'white-pawn', 'G7': 'white-pawn', 'H7': 'white-pawn',\n                        'A8': 'white-rook', 'B8': 'white-knight', 'C8': 'white-bishop', 'D8': 'white-king', 'E8': 'white-queen', 'F8': 'white-bishop', 'G8': 'white-knight', 'H8': 'white-rook'}, \n        },\n        initialSetType: 'blacksOnTop',\n        situation: [],\n        movesHistory: []\n      },\n    }\n\n    this.recordMoves = this.recordMoves.bind(this);\n    this.updateSituation = this.updateSituation.bind(this);\n    this.findRankNumber = this.findRankNumber.bind(this);\n    this.findFileNumber = this.findFileNumber.bind(this);\n    this.updateSituationByMoveId = this.updateSituationByMoveId.bind(this);\n    this.loadSessionFromArchive = this.loadSessionFromArchive.bind(this);\n  }\n\n  findSquare(situation, coordinates) {\n    for (let row of situation) {\n      for (let square of row) {\n        if (square.coordinates === coordinates) {\n          return square;\n        }\n      }\n    }\n  }\n\n  findRankNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n        if (square.coordinates === bySquareCoordinates) {\n          return i;\n        }\n      }\n    }\n  }\n\n  findFileNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n        if (square.coordinates === bySquareCoordinates) {\n          return j;\n        }\n      }\n    }\n  }\n\n  copySituation(situation) {\n    let situationCopy = [];\n    for (let row of situation) {\n      let rowCopy = [];\n      for (let square of row) {\n        let squareCopy = {};\n        for (let key in square) {\n          squareCopy[key] = square[key];\n        }\n        rowCopy.push(squareCopy);\n      }\n      situationCopy.push(rowCopy);\n    }\n    return situationCopy;\n  }\n\n  copyMovesHistory(history) {\n    let historyCopy = [];\n    if (history.length > 0)\n      for (let entry of history) {\n        let entryCopy = {};\n        for (let key in entry) {\n          entryCopy[key] = entry[key];\n        }\n        historyCopy.push(entryCopy);\n      }\n    return historyCopy;\n  }\n\n  recordMoves(moves) {\n    let i = 0;\n    const self = this;\n    const reversedMoves = moves.slice().reverse();\n    function recordMove(move) {\n      self.setState(state => {\n        let situationCopy = self.copySituation(state.situation);\n        self.findSquare(situationCopy, move.from).piece = null;\n        const movedPiece = `${self.turnMap[move.side]}${self.piecesMap[move.piece]}`;\n        self.findSquare(situationCopy, move.to).piece = movedPiece;\n        let movesHistoryCopy = self.copyMovesHistory(state.movesHistory);\n        movesHistoryCopy.push({id: `${move.id}`, situation: situationCopy});\n        return {situation: situationCopy, movesHistory: movesHistoryCopy}\n      }, () => {\n        i++;\n        if (i < moves.length) \n          recordMove(reversedMoves[i]);\n      });\n    }\n    recordMove(reversedMoves[i]);\n  }\n\n  findSituation(moveId) {\n    for (let move of this.state.movesHistory)\n      if (move.id === moveId.toString())\n        return move.situation;\n  }\n\n  updateSituation(situation) {\n    this.setState({situation: situation});\n  }\n\n  updateSituationByMoveId(id) {\n    this.updateSituation(this.findSituation(id));\n  }\n\n  loadSessionFromArchive(movesHistory, moves) {\n    this.setState({movesHistory: movesHistory}, () => this.updateSituationByMoveId(moves[0].id));\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Board board={this.board} \n               boardSettings={this.state.board}\n               situation={this.state.situation}\n               updateSituation={this.updateSituation} />\n        <Panel side={this.state.turn}\n               recordMoves={this.recordMoves} \n               situation={this.state.situation}\n               movesHistory={this.state.movesHistory}\n               updateSituationByMoveId={this.updateSituationByMoveId}\n               loadSessionFromArchive={this.loadSessionFromArchive} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}