{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Board.js\";\nimport React from 'react';\nimport Row from './Row';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dimensions = {\n      width: 8,\n      height: 8\n    };\n    this.state = {\n      squares: []\n    };\n  }\n\n  componentDidMount() {\n    this.prepareSquares();\n  }\n\n  setPieces() {}\n\n  prepareSquares() {\n    let squareColor = 1,\n        squares = [];\n\n    for (let index = 0; index < this.dimensions.height; index++) {\n      let row = [];\n\n      for (let index = 0; index < this.dimensions.width; index++) {\n        row.push(squareColor);\n        if (index !== this.dimensions.width - 1) if (squareColor === 1) squareColor = 0;else squareColor = 1;\n      }\n\n      squares.push(row);\n    }\n\n    this.setState({\n      squares: squares\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"Board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.state.squares.map((row, id) => React.createElement(Row, {\n      key: id,\n      squares: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Board.js"],"names":["React","Row","Board","Component","constructor","props","dimensions","width","height","state","squares","componentDidMount","prepareSquares","setPieces","squareColor","index","row","push","setState","render","map","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,UAAL,GAAkB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAlB;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,cAAL;AACH;;AAEDC,EAAAA,SAAS,GAAG,CAEX;;AAEDD,EAAAA,cAAc,GAAG;AACb,QAAIE,WAAW,GAAG,CAAlB;AAAA,QAAqBJ,OAAO,GAAG,EAA/B;;AACA,SAAK,IAAIK,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKT,UAAL,CAAgBE,MAA5C,EAAoDO,KAAK,EAAzD,EAA6D;AACzD,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAK,IAAID,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKT,UAAL,CAAgBC,KAA5C,EAAmDQ,KAAK,EAAxD,EAA4D;AACxDC,QAAAA,GAAG,CAACC,IAAJ,CAASH,WAAT;AAAuB,YAAIC,KAAK,KAAK,KAAKT,UAAL,CAAgBC,KAAhB,GAAwB,CAAtC,EAAyC,IAAIO,WAAW,KAAK,CAApB,EAAuBA,WAAW,GAAG,CAAd,CAAvB,KAA6CA,WAAW,GAAG,CAAd;AAChH;;AACDJ,MAAAA,OAAO,CAACO,IAAR,CAAaD,GAAb;AACH;;AACD,SAAKE,QAAL,CAAc;AAACR,MAAAA,OAAO,EAAEA;AAAV,KAAd;AACH;;AAEDS,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKV,KAAL,CAAWC,OAAX,CAAmBU,GAAnB,CAAuB,CAACJ,GAAD,EAAMK,EAAN,KAAa,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,EAAV;AAAc,MAAA,OAAO,EAAEL,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApC,CADL,CADJ,CADJ;AAOH;;AArC+B;;AAwCpC,eAAed,KAAf","sourcesContent":["import React from 'react';\nimport Row from './Row'\nimport './Board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dimensions = { width: 8, height: 8 }\n        this.state = {\n            squares: []\n        }\n    }\n\n    componentDidMount() {\n        this.prepareSquares();\n    }\n\n    setPieces() {\n        \n    }\n\n    prepareSquares() {\n        let squareColor = 1, squares = [];\n        for (let index = 0; index < this.dimensions.height; index++) {\n            let row = [];\n            for (let index = 0; index < this.dimensions.width; index++) {\n                row.push(squareColor); if (index !== this.dimensions.width - 1) if (squareColor === 1) squareColor = 0; else squareColor = 1;\n            }\n            squares.push(row); \n        }\n        this.setState({squares: squares});\n    }\n\n    render() {\n        return (\n            <div id=\"Board\">\n                <div className=\"Content\">\n                    {this.state.squares.map((row, id) => <Row key={id} squares={row} />)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}