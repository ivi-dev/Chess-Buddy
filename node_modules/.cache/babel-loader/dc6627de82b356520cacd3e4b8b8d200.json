{"ast":null,"code":"import _defineProperty from \"/Users/iliyanvidev/Code/chess-buddy/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/iliyanvidev/Code/chess-buddy/src/Panel.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport NotationsInput from './NotationsInput';\nimport Buttons from './Buttons';\nimport SessionNameInput from './SessionNameInput';\nimport SessionsPanel from './SessionsPanel';\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\nimport Database from './Database';\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.notationParams = {\n      notationMinLength: 5,\n      notationMaxLength: 5\n    };\n    this.db = null;\n    this.state = {\n      moves: [],\n      notations: '',\n      notaitionsError: '',\n      dbError: '',\n      panels: {\n        sessionsPanel: {\n          visible: false\n        },\n        saveSessionPanel: {\n          visible: false\n        }\n      },\n      sessions: [],\n      sessionName: '',\n      sessionNotes: '',\n      confirm: true\n    };\n    this.updateNotations = this.updateNotations.bind(this);\n    this.parseNotations = this.parseNotations.bind(this);\n    this.toggleSessionsPanel = this.toggleSessionsPanel.bind(this);\n    this.toggleSaveSessionPanel = this.toggleSaveSessionPanel.bind(this);\n    this.updateSessionName = this.updateSessionName.bind(this);\n    this.updateSessionNotes = this.updateSessionNotes.bind(this);\n    this.fadeOutMoves = this.fadeOutMoves.bind(this);\n    this.resetMovesFade = this.resetMovesFade.bind(this);\n    this.saveSession = this.saveSession.bind(this);\n    this.updateMoves = this.updateMoves.bind(this);\n    this.deleteSession = this.deleteSession.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.props.testRun) {\n      this.db = new Database();\n      this.db.configure(() => {\n        console.log(\"DB_EVENT::There was a change in the local database. Something was inserted, removed or updated.\");\n      }, () => {\n        console.log('DB_EVENT::There was an error during a database operation.');\n      });\n      this.updateSessionsList();\n    }\n  }\n\n  updateNotations(event) {\n    this.setState({\n      notaitionsError: ''\n    });\n    this.setState({\n      notations: event.target.value\n    });\n  }\n\n  validateNotation(notation) {\n    const minLength = this.notationParams.notationMinLength,\n          maxLength = this.notationParams.notationMaxLength;\n\n    function checkLength() {\n      return notation.length >= minLength && notation.length <= maxLength;\n    }\n\n    function checkComposition() {\n      return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n    }\n\n    return checkLength() && checkComposition();\n  }\n\n  generateId(collection) {\n    if (collection.length === 0) return 1;else return collection[0].id + 1;\n  }\n\n  capitalize(notation) {\n    const split = notation.split('');\n    let capitalizedSplit = [];\n    split.forEach((letter, index) => {\n      if (index === 0) capitalizedSplit.push(letter.toUpperCase());else capitalizedSplit.push(letter.toLowerCase());\n    });\n    return capitalizedSplit.join('');\n  }\n\n  disectNotation(notation) {\n    const split = notation.split('');\n    return {\n      piece: split[0].toUpperCase(),\n      from: (split[1] + split[2]).toUpperCase(),\n      to: (split[3] + split[4]).toUpperCase()\n    };\n  }\n\n  parseNotations(event) {\n    event.preventDefault();\n\n    if (this.state.notations.length > 0) {\n      const notations = this.state.notations.trim().split(/\\n/);\n      let allNotationsValid = true;\n\n      for (let notation of notations) if (!this.validateNotation(notation.replace(/\\s*/g, ''))) {\n        allNotationsValid = false;\n        this.setState({\n          notaitionsError: \"Invalid notation: '\".concat(notation, \"'\")\n        });\n        break;\n      }\n\n      if (allNotationsValid) {\n        let moves = [];\n\n        for (let notation of notations) {\n          const prettyNotation = this.capitalize(notation.replace(/\\s*/g, ''));\n          const id = this.generateId(moves);\n          const moveData = this.disectNotation(notation);\n          const move = {\n            id: id,\n            notation: prettyNotation,\n            piece: moveData.piece,\n            from: moveData.from,\n            to: moveData.to,\n            side: id % 2 === 0 ? 'Blacks' : 'Whites',\n            faded: false\n          };\n          moves.unshift(move);\n        }\n\n        this.props.recordMoves(moves);\n        this.setState({\n          moves: moves\n        }, () => this.setState({\n          notationsList: ''\n        }));\n      }\n    } else {\n      this.setState({\n        notaitionsError: 'Nothing to parse.'\n      });\n    }\n  }\n\n  fadeOutMoves(upwardsFromMove) {\n    this.setState(state => {\n      state.moves.forEach(move => {\n        if (move.id > upwardsFromMove) move.faded = true;else move.faded = false;\n      });\n      return {\n        moves: state.moves\n      };\n    });\n  }\n\n  resetMovesFade() {\n    this.setState(state => {\n      state.moves.forEach(move => move.faded = false);\n      return {\n        moves: state.moves\n      };\n    });\n  }\n\n  toggleSaveSessionPanel(event) {\n    if (event) event.preventDefault();\n    this.setState(state => ({\n      panels: _objectSpread({}, state.panels, {\n        saveSessionPanel: {\n          visible: !state.panels.saveSessionPanel.visible\n        }\n      }),\n      dbError: ''\n    }));\n  }\n\n  toggleSessionsPanel() {\n    this.setState(state => ({\n      panels: _objectSpread({}, state.panels, {\n        sessionsPanel: {\n          visible: !state.panels.sessionsPanel.visible\n        }\n      })\n    }));\n  }\n\n  updateSessionName(event) {\n    this.setState({\n      sessionName: event.target.value\n    });\n  }\n\n  updateSessionNotes(event) {\n    this.setState({\n      sessionNotes: event.target.value\n    });\n  }\n\n  getLatestSessionId() {\n    let id = 0;\n    this.state.sessions.forEach(session => {\n      if (session.id > id) id = session.id;\n    });\n    return id;\n  }\n\n  saveSession(event) {\n    event.preventDefault();\n\n    if (!this.state.sessionName.trim()) {\n      this.setState({\n        dbError: 'Please, give your session a name first.'\n      });\n      return;\n    }\n\n    this.db.insert({\n      id: this.getLatestSessionId() + 1,\n      _id: this.state.sessionName,\n      notes: this.state.sessionNotes,\n      moves_count: this.state.moves.length,\n      moves: this.state.moves,\n      moves_history: this.props.movesHistory,\n      date_saved: Date()\n    }, () => {\n      this.setState({\n        sessionName: '',\n        sessionNotes: ''\n      }, () => this.toggleSaveSessionPanel());\n      this.updateSessionsList();\n    }, err => {\n      if (err.message === 'Document update conflict' && err.status === 409) this.setState({\n        dbError: \"Session '\".concat(this.state.sessionName, \"' already exists, choose another name.\")\n      });\n    });\n  }\n\n  updateSessionsList() {\n    function recreateSessions(dbResult) {\n      let sessions = [];\n      dbResult.rows.forEach(row => {\n        sessions.push({\n          id: row.doc.id,\n          title: row.doc._id,\n          movesHistory: row.doc.moves_history,\n          moves: row.doc.moves\n        });\n      });\n      return sessions;\n    }\n\n    this.db.getAll({\n      include_docs: true\n    }, res => {\n      this.setState({\n        sessions: recreateSessions(res)\n      });\n    });\n  }\n\n  updateMoves(moves) {\n    this.setState({\n      moves: moves,\n      panels: {\n        sessionsPanel: {\n          visible: false\n        }\n      }\n    });\n  }\n\n  deleteSession(title) {\n    this.db.delete(title, () => {\n      this.updateSessionsList();\n    });\n  }\n\n  render() {\n    console.log(this.state.panels.saveSessionPanel.visible);\n    return React.createElement(\"aside\", {\n      id: \"Panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(NotationsInput, {\n      notations: this.state.notations,\n      updateNotations: this.updateNotations,\n      parseNotations: this.parseNotations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), this.state.notaitionsError && React.createElement(\"div\", {\n      id: \"Error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, this.state.notaitionsError), this.state.moves.length !== 0 && React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Session History\"), React.createElement(MovesHistory, {\n      moves: this.state.moves,\n      side: this.props.side,\n      updateSituationByMoveId: this.props.updateSituationByMoveId,\n      fadeOutMoves: this.fadeOutMoves,\n      resetMovesFade: this.resetMovesFade,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(Buttons, {\n      toggleSessionsPanel: this.toggleSessionsPanel,\n      toggleSaveSessionPanel: this.toggleSaveSessionPanel,\n      moves: this.state.moves,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(SessionNameInput, {\n      visible: this.state.panels.saveSessionPanel.visible,\n      toggleSaveSessionPanel: this.toggleSaveSessionPanel,\n      sessionName: this.state.sessionName,\n      sessionNotes: this.state.sessionNotes,\n      updateSessionName: this.updateSessionName,\n      updateSessionNotes: this.updateSessionNotes,\n      saveSession: this.saveSession,\n      dbError: this.state.dbError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(SessionsPanel, {\n      visible: this.state.panels.sessionsPanel.visible,\n      sessions: this.state.sessions,\n      toggleSessionsPanel: this.toggleSessionsPanel,\n      loadSessionFromArchive: this.props.loadSessionFromArchive,\n      updateMoves: this.updateMoves,\n      deleteSession: this.deleteSession,\n      confirm: this.state.confirm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Panel;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-buddy/src/Panel.js"],"names":["React","NotationsInput","Buttons","SessionNameInput","SessionsPanel","MovesHistory","Database","Panel","Component","constructor","props","notationParams","notationMinLength","notationMaxLength","db","state","moves","notations","notaitionsError","dbError","panels","sessionsPanel","visible","saveSessionPanel","sessions","sessionName","sessionNotes","confirm","updateNotations","bind","parseNotations","toggleSessionsPanel","toggleSaveSessionPanel","updateSessionName","updateSessionNotes","fadeOutMoves","resetMovesFade","saveSession","updateMoves","deleteSession","componentDidMount","testRun","configure","console","log","updateSessionsList","event","setState","target","value","validateNotation","notation","minLength","maxLength","checkLength","length","checkComposition","match","generateId","collection","id","capitalize","split","capitalizedSplit","forEach","letter","index","push","toUpperCase","toLowerCase","join","disectNotation","piece","from","to","preventDefault","trim","allNotationsValid","replace","prettyNotation","moveData","move","side","faded","unshift","recordMoves","notationsList","upwardsFromMove","getLatestSessionId","session","insert","_id","notes","moves_count","moves_history","movesHistory","date_saved","Date","err","message","status","recreateSessions","dbResult","rows","row","doc","title","getAll","include_docs","res","delete","render","updateSituationByMoveId","loadSessionFromArchive"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NotationsInput from './NotationsInput'\nimport Buttons from './Buttons'\nimport SessionNameInput from './SessionNameInput'\nimport SessionsPanel from './SessionsPanel'\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\nimport Database from './Database';\n\nclass Panel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.notationParams ={\n            notationMinLength: 5,\n            notationMaxLength: 5\n        }\n        this.db = null;\n        this.state = {\n            moves: [],\n            notations: '',\n            notaitionsError: '',\n            dbError: '',\n            panels: {\n                sessionsPanel: {visible: false},\n                saveSessionPanel: {visible: false}\n            },\n            sessions: [],\n            sessionName: '',\n            sessionNotes: '',\n            confirm: true\n        }\n        this.updateNotations = this.updateNotations.bind(this);\n        this.parseNotations = this.parseNotations.bind(this);\n        this.toggleSessionsPanel = this.toggleSessionsPanel.bind(this);\n        this.toggleSaveSessionPanel = this.toggleSaveSessionPanel.bind(this);\n        this.updateSessionName = this.updateSessionName.bind(this);\n        this.updateSessionNotes = this.updateSessionNotes.bind(this);\n        this.fadeOutMoves = this.fadeOutMoves.bind(this);\n        this.resetMovesFade = this.resetMovesFade.bind(this);\n        this.saveSession = this.saveSession.bind(this);\n        this.updateMoves = this.updateMoves.bind(this);\n        this.deleteSession = this.deleteSession.bind(this);\n    }\n\n    componentDidMount() {\n        if (!this.props.testRun) {\n            this.db = new Database();\n            this.db.configure(() => {console.log(`DB_EVENT::There was a change in the local database. Something was inserted, removed or updated.`)},\n                            () => {console.log('DB_EVENT::There was an error during a database operation.');});\n            this.updateSessionsList();\n        }\n    }\n\n    updateNotations(event) {\n        this.setState({notaitionsError: ''});\n        this.setState({notations: event.target.value});\n    }\n\n    validateNotation(notation) {\n        const minLength = this.notationParams.notationMinLength, maxLength = this.notationParams.notationMaxLength;\n        function checkLength() {\n            return notation.length >= minLength && notation.length <= maxLength;\n        }\n        function checkComposition() {\n            return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n        }\n        return checkLength() && checkComposition();\n    }\n\n    generateId(collection) {\n        if (collection.length === 0)\n            return 1;\n        else\n            return collection[0].id + 1;\n    }\n\n    capitalize(notation) {\n        const split = notation.split('');\n        let capitalizedSplit = [];\n        split.forEach((letter, index) => {if (index === 0) capitalizedSplit.push(letter.toUpperCase())\n                                          else capitalizedSplit.push(letter.toLowerCase())});\n        return capitalizedSplit.join('');\n    }\n\n    disectNotation(notation) {\n        const split = notation.split('');\n        return {piece: split[0].toUpperCase(), from: (split[1] + split[2]).toUpperCase(), \n                to: (split[3] + split[4]).toUpperCase()};\n    }\n\n    parseNotations(event) {\n        event.preventDefault();\n        if (this.state.notations.length > 0) {\n            const notations = this.state.notations.trim().split(/\\n/);\n            let allNotationsValid = true;\n            for (let notation of notations)\n                if (!this.validateNotation(notation.replace(/\\s*/g, ''))) {\n                    allNotationsValid = false;\n                    this.setState({notaitionsError: `Invalid notation: '${notation}'`});\n                    break;\n                }\n            if (allNotationsValid) {\n                let moves = [];\n                for (let notation of notations) {\n                    const prettyNotation = this.capitalize(notation.replace(/\\s*/g, ''));\n                    const id = this.generateId(moves);\n                    const moveData = this.disectNotation(notation);\n                    const move = {id: id, notation: prettyNotation, piece: moveData.piece,\n                                  from: moveData.from, to: moveData.to,\n                                  side: id % 2 === 0 ? 'Blacks' : 'Whites', \n                                  faded: false};\n                    moves.unshift(move);\n                }\n                this.props.recordMoves(moves);\n                this.setState({moves: moves}, () => this.setState({notationsList: ''}));\n            }\n        } else {\n            this.setState({notaitionsError: 'Nothing to parse.'});\n        }\n    }\n\n    fadeOutMoves(upwardsFromMove) {\n        this.setState(state => {\n            state.moves.forEach(move => {\n                if (move.id > upwardsFromMove) move.faded = true; \n                else move.faded = false;\n            });\n            return {moves: state.moves}\n        });\n    }\n\n    resetMovesFade() {\n        this.setState(state => {\n            state.moves.forEach(move => move.faded = false);\n            return {moves: state.moves}\n        });\n    }\n\n    toggleSaveSessionPanel(event) {\n        if (event)\n            event.preventDefault();\n        this.setState(state => ({panels: {...state.panels, saveSessionPanel: {visible: !state.panels.saveSessionPanel.visible}}, dbError: ''}));\n    }\n\n    toggleSessionsPanel() {\n        this.setState(state => ({panels: {...state.panels, sessionsPanel: {visible: !state.panels.sessionsPanel.visible}}}));\n    }\n\n    updateSessionName(event) {\n        this.setState({sessionName: event.target.value});\n    }\n\n    updateSessionNotes(event) {\n        this.setState({sessionNotes: event.target.value});\n    }\n\n    getLatestSessionId() {\n        let id = 0;\n        this.state.sessions.forEach(session => {\n            if (session.id > id) id = session.id;\n        });\n        return id;\n    }\n\n    saveSession(event) {\n        event.preventDefault();\n        if (!this.state.sessionName.trim()) {\n            this.setState({dbError: 'Please, give your session a name first.'});\n            return;\n        }\n        this.db.insert({id: this.getLatestSessionId() + 1, \n                        _id: this.state.sessionName, \n                        notes: this.state.sessionNotes, \n                        moves_count: this.state.moves.length, \n                        moves: this.state.moves,\n                        moves_history: this.props.movesHistory,\n                        date_saved: Date()},\n                        () => {\n                            this.setState({sessionName: '', sessionNotes: ''}, () => this.toggleSaveSessionPanel()); \n                            this.updateSessionsList()\n                        }, (err) => {\n                            if (err.message === 'Document update conflict' && err.status === 409) \n                                this.setState({dbError: `Session '${this.state.sessionName}' already exists, choose another name.`});\n                            });\n    }\n\n    updateSessionsList() {\n        function recreateSessions(dbResult) {\n            let sessions = [];\n            dbResult.rows.forEach(row => {\n                sessions.push({id: row.doc.id, \n                               title: row.doc._id, \n                               movesHistory: row.doc.moves_history, \n                               moves: row.doc.moves});\n            });\n            return sessions;\n        }\n        this.db.getAll({include_docs: true}, res => {\n            this.setState({sessions: recreateSessions(res)});\n        });\n    }\n\n    updateMoves(moves) {\n        this.setState({moves: moves, panels: {sessionsPanel: {visible: false}}});\n    }\n\n    deleteSession(title) {\n        this.db.delete(title, () => {this.updateSessionsList()});\n    }\n\n    render() {\n        console.log(this.state.panels.saveSessionPanel.visible)\n        return (\n            <aside id=\"Panel\">\n                <NotationsInput notations={this.state.notations} \n                                updateNotations={this.updateNotations} \n                                parseNotations={this.parseNotations} />\n                {this.state.notaitionsError && <div id=\"Error\">{this.state.notaitionsError}</div>}\n                {this.state.moves.length !== 0 && <h3>Session History</h3>}\n                <MovesHistory moves={this.state.moves} \n                              side={this.props.side} \n                              updateSituationByMoveId={this.props.updateSituationByMoveId} \n                              fadeOutMoves={this.fadeOutMoves} \n                              resetMovesFade={this.resetMovesFade} />\n                <Buttons toggleSessionsPanel={this.toggleSessionsPanel} \n                         toggleSaveSessionPanel={this.toggleSaveSessionPanel} \n                         moves={this.state.moves} />\n                <SessionNameInput visible={this.state.panels.saveSessionPanel.visible} \n                                  toggleSaveSessionPanel={this.toggleSaveSessionPanel} \n                                  sessionName={this.state.sessionName} \n                                  sessionNotes={this.state.sessionNotes} \n                                  updateSessionName={this.updateSessionName} \n                                  updateSessionNotes={this.updateSessionNotes} \n                                  saveSession={this.saveSession}\n                                  dbError={this.state.dbError} />\n                <SessionsPanel visible={this.state.panels.sessionsPanel.visible} \n                               sessions={this.state.sessions} \n                               toggleSessionsPanel={this.toggleSessionsPanel} \n                               loadSessionFromArchive={this.props.loadSessionFromArchive} \n                               updateMoves={this.updateMoves} \n                               deleteSession={this.deleteSession}\n                               confirm={this.state.confirm} />\n            </aside>\n        );\n    }\n}\n\nexport default Panel;"]},"metadata":{},"sourceType":"module"}