{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Board.js\";\nimport React from 'react';\nimport Row from './Row';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dimensions = {\n      width: 8,\n      height: 8\n    };\n    this.vCoordinates = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    this.hCoordinates = ['8', '7', '6', '5', '4', '3', '2', '1'];\n    this.initialSet = {\n      blacksOnTop: {\n        'A1': 'white-rook',\n        'B1': 'white-knight',\n        'C1': 'white-bishop',\n        'D1': 'white-queen',\n        'E1': 'white-king',\n        'F1': 'white-bishop',\n        'G1': 'white-knight',\n        'H1': 'white-rook',\n        'A2': 'white-pawn',\n        'B2': 'white-pawn',\n        'C2': 'white-pawn',\n        'D2': 'white-pawn',\n        'E2': 'white-pawn',\n        'F2': 'white-pawn',\n        'G2': 'white-pawn',\n        'H2': 'white-pawn',\n        'A7': 'black-pawn',\n        'B7': 'black-pawn',\n        'C7': 'black-pawn',\n        'D7': 'black-pawn',\n        'E7': 'black-pawn',\n        'F7': 'black-pawn',\n        'G7': 'black-pawn',\n        'H7': 'black-pawn',\n        'A8': 'black-rook',\n        'B8': 'black-knight',\n        'C8': 'black-bishop',\n        'D8': 'black-king',\n        'E8': 'black-queen',\n        'F8': 'black-bishop',\n        'G8': 'black-knight',\n        'H8': 'black-rook'\n      },\n      whitesOnTop: {\n        'A1': 'black-rook',\n        'B1': 'black-knight',\n        'C1': 'black-bishop',\n        'D1': 'black-queen',\n        'E1': 'black-king',\n        'F1': 'black-bishop',\n        'G1': 'black-knight',\n        'H1': 'black-rook',\n        'A2': 'black-pawn',\n        'B2': 'black-pawn',\n        'C2': 'black-pawn',\n        'D2': 'black-pawn',\n        'E2': 'black-pawn',\n        'F2': 'black-pawn',\n        'G2': 'black-pawn',\n        'H2': 'black-pawn',\n        'A7': 'white-pawn',\n        'B7': 'white-pawn',\n        'C7': 'white-pawn',\n        'D7': 'white-pawn',\n        'E7': 'white-pawn',\n        'F7': 'white-pawn',\n        'G7': 'white-pawn',\n        'H7': 'white-pawn',\n        'A8': 'white-rook',\n        'B8': 'white-knight',\n        'C8': 'white-bishop',\n        'D8': 'white-king',\n        'E8': 'white-queen',\n        'F8': 'white-bishop',\n        'G8': 'white-knight',\n        'H8': 'white-rook'\n      }\n    };\n    this.state = {\n      rows: [],\n      initialSet: 'whitesOnTop',\n      turn: 'whites'\n    };\n    this.updateBoard = this.updateBoard.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateBoard();\n  }\n\n  updateBoard() {\n    let hCoordinate = -1,\n        color = 1,\n        rows = [];\n\n    for (let index = 0; index < this.dimensions.height; index++) {\n      let row = [],\n          vCoordinate = -1;\n      hCoordinate++;\n\n      for (let index = 0; index < this.dimensions.width; index++) {\n        vCoordinate++;\n        const coordinate = \"\".concat(this.vCoordinates[vCoordinate]).concat(this.hCoordinates[hCoordinate]);\n        row.push({\n          coordinates: coordinate,\n          color: color,\n          piece: this.initialSet[this.state.initialSet][coordinate]\n        });\n        if (index !== this.dimensions.width - 1) if (color === 1) color = 0;else color = 1;\n      }\n\n      rows.push(row);\n    }\n\n    this.setState({\n      rows: rows\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"Board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.state.rows.map((row, id) => React.createElement(Row, {\n      key: id,\n      row: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Board.js"],"names":["React","Row","Board","Component","constructor","props","dimensions","width","height","vCoordinates","hCoordinates","initialSet","blacksOnTop","whitesOnTop","state","rows","turn","updateBoard","bind","componentDidMount","hCoordinate","color","index","row","vCoordinate","coordinate","push","coordinates","piece","setState","render","map","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Row from './Row'\nimport './Board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dimensions = { width: 8, height: 8 }\n        this.vCoordinates = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n        this.hCoordinates = ['8', '7', '6', '5', '4', '3', '2', '1'];\n        this.initialSet = {\n            blacksOnTop: {'A1': 'white-rook', 'B1': 'white-knight', 'C1': 'white-bishop', 'D1': 'white-queen', 'E1': 'white-king', 'F1': 'white-bishop', 'G1': 'white-knight', 'H1': 'white-rook', \n                          'A2': 'white-pawn', 'B2': 'white-pawn', 'C2': 'white-pawn', 'D2': 'white-pawn', 'E2': 'white-pawn', 'F2': 'white-pawn', 'G2': 'white-pawn', 'H2': 'white-pawn',\n                          'A7': 'black-pawn', 'B7': 'black-pawn', 'C7': 'black-pawn', 'D7': 'black-pawn', 'E7': 'black-pawn', 'F7': 'black-pawn', 'G7': 'black-pawn', 'H7': 'black-pawn',\n                          'A8': 'black-rook', 'B8': 'black-knight', 'C8': 'black-bishop', 'D8': 'black-king', 'E8': 'black-queen', 'F8': 'black-bishop', 'G8': 'black-knight', 'H8': 'black-rook'}, \n            \n            whitesOnTop: {'A1': 'black-rook', 'B1': 'black-knight', 'C1': 'black-bishop', 'D1': 'black-queen', 'E1': 'black-king', 'F1': 'black-bishop', 'G1': 'black-knight', 'H1': 'black-rook', \n                          'A2': 'black-pawn', 'B2': 'black-pawn', 'C2': 'black-pawn', 'D2': 'black-pawn', 'E2': 'black-pawn', 'F2': 'black-pawn', 'G2': 'black-pawn', 'H2': 'black-pawn',\n                          'A7': 'white-pawn', 'B7': 'white-pawn', 'C7': 'white-pawn', 'D7': 'white-pawn', 'E7': 'white-pawn', 'F7': 'white-pawn', 'G7': 'white-pawn', 'H7': 'white-pawn',\n                          'A8': 'white-rook', 'B8': 'white-knight', 'C8': 'white-bishop', 'D8': 'white-king', 'E8': 'white-queen', 'F8': 'white-bishop', 'G8': 'white-knight', 'H8': 'white-rook'}, \n        };\n        this.state = {\n            rows: [],\n            initialSet: 'whitesOnTop',\n            turn: 'whites'\n        }\n\n        this.updateBoard = this.updateBoard.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateBoard();\n    }\n\n    updateBoard() {\n        let hCoordinate = -1, color = 1, rows = [];\n        for (let index = 0; index < this.dimensions.height; index++) {\n            let row = [], vCoordinate = -1; hCoordinate++;\n            for (let index = 0; index < this.dimensions.width; index++) {\n                vCoordinate++; \n                const coordinate = `${this.vCoordinates[vCoordinate]}${this.hCoordinates[hCoordinate]}`\n                row.push({coordinates: coordinate, color: color, piece: this.initialSet[this.state.initialSet][coordinate]}); \n                if (index !== this.dimensions.width - 1) \n                    if (color === 1) color = 0; \n                    else color = 1;\n            }\n            rows.push(row); \n        }\n        this.setState({rows: rows});\n    }\n\n    render() {\n        return (\n            <div id=\"Board\">\n                <div className=\"Content\">\n                    {this.state.rows.map((row, id) => <Row key={id} row={row} />)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}