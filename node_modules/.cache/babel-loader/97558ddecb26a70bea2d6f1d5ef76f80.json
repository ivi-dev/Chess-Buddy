{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Board.js\";\nimport React from 'react';\nimport Row from './Row';\nimport './Board.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dimensions = {\n      width: 8,\n      height: 8\n    };\n    this.vCoordinates = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    this.hCoordinates = ['8', '7', '6', '5', '4', '3', '2', '1'];\n    this.state = {\n      rows: []\n    };\n    this.updateBoard = this.updateBoard.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateBoard();\n  }\n\n  updateBoard() {\n    let hCoordinate = -1,\n        color = 1,\n        rows = [];\n\n    for (let index = 0; index < this.dimensions.height; index++) {\n      let row = [],\n          vCoordinate = -1;\n      hCoordinate++;\n\n      for (let index = 0; index < this.dimensions.width; index++) {\n        vCoordinate++;\n        const coordinate = \"\".concat(this.props.board.vCoordinates[vCoordinate]).concat(this.props.board.hCoordinates[hCoordinate]);\n        row.push({\n          coordinates: coordinate,\n          color: color,\n          piece: this.props.set[this.props.initialSet][coordinate]\n        });\n        if (index !== this.dimensions.width - 1) if (color === 1) color = 0;else color = 1;\n      }\n\n      rows.push(row);\n    }\n\n    this.setState({\n      rows: rows\n    });\n  }\n\n  render() {\n    let files = [],\n        ranks = [];\n\n    if (this.state.rows[0]) {\n      const row = this.state.rows[0];\n      row.forEach(square => files.push(square.coordinates.split('')[0]));\n    }\n\n    for (let i = 1; i < this.state.rows.length + 1; i++) ranks.push(i);\n\n    return React.createElement(\"div\", {\n      id: \"Board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.state.rows.map((row, id) => React.createElement(Row, {\n      key: id,\n      row: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      id: \"FileStrip\",\n      className: \"strip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, files.map((file, id) => React.createElement(\"div\", {\n      key: id,\n      className: \"File\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, file))), React.createElement(\"div\", {\n      id: \"RankStrip\",\n      className: \"strip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, ranks.map((rank, id) => React.createElement(\"div\", {\n      key: id,\n      className: \"Rank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, rank))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Board.js"],"names":["React","Row","Board","Component","constructor","props","dimensions","width","height","vCoordinates","hCoordinates","state","rows","updateBoard","bind","componentDidMount","hCoordinate","color","index","row","vCoordinate","coordinate","board","push","coordinates","piece","set","initialSet","setState","render","files","ranks","forEach","square","split","i","length","map","id","file","rank"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Row from './Row'\nimport './Board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dimensions = { width: 8, height: 8 }\n        this.vCoordinates = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n        this.hCoordinates = ['8', '7', '6', '5', '4', '3', '2', '1'];\n        \n        this.state = {\n            rows: []\n        }\n\n        this.updateBoard = this.updateBoard.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateBoard();\n    }\n\n    updateBoard() {\n        let hCoordinate = -1, color = 1, rows = [];\n        for (let index = 0; index < this.dimensions.height; index++) {\n            let row = [], vCoordinate = -1; hCoordinate++;\n            for (let index = 0; index < this.dimensions.width; index++) {\n                vCoordinate++; \n                const coordinate = `${this.props.board.vCoordinates[vCoordinate]}${this.props.board.hCoordinates[hCoordinate]}`\n                row.push({coordinates: coordinate, color: color, piece: this.props.set[this.props.initialSet][coordinate]}); \n                if (index !== this.dimensions.width - 1) \n                    if (color === 1) color = 0; \n                    else color = 1;\n            }\n            rows.push(row); \n        }\n        this.setState({rows: rows});\n    }\n\n    render() {\n        let files = [], ranks = [];\n        if (this.state.rows[0]) {\n            const row = this.state.rows[0];\n            row.forEach(square => files.push(square.coordinates.split('')[0]));\n        }\n        for (let i = 1; i < this.state.rows.length + 1; i++)\n            ranks.push(i);\n        return (\n            <div id=\"Board\">\n                <div className=\"Content\">\n                    {this.state.rows.map((row, id) => <Row key={id} row={row} />)}\n                </div>\n                <div id=\"FileStrip\" className=\"strip\">{files.map((file, id) => <div key={id} className=\"File\">{file}</div>)}</div>\n                <div id=\"RankStrip\" className=\"strip\">{ranks.map((rank, id) => <div key={id} className=\"Rank\">{rank}</div>)}</div>\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}