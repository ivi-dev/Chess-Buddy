{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/App.js\";\nimport React from 'react';\nimport Board from './Board';\nimport './App.css';\nimport Panel from './Panel';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.board = {\n      vCoordinates: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n      hCoordinates: ['1', '2', '3', '4', '5', '6', '7', '8'],\n      dimensions: {\n        width: 8,\n        height: 8\n      }\n    };\n    this.turnMap = {\n      'Whites': 'white-',\n      'Blacks': 'black-'\n    };\n    this.piecesMap = {\n      'R': 'rook',\n      'N': 'knight',\n      'B': 'bishop',\n      'K': 'king',\n      'Q': 'queen',\n      'P': 'pawn'\n    };\n    this.piecesMovement = {\n      pawn: {\n        forward: {\n          by: 1,\n          exact: true\n        },\n        back: {\n          by: null\n        },\n        left: {\n          by: 1,\n          exact: true,\n          specialCase: 'captures'\n        },\n        right: {\n          by: 1,\n          exact: true,\n          specialCase: 'captures'\n        }\n      },\n      rook: {\n        forward: {\n          by: this.board.dimensions.height,\n          max: true\n        },\n        back: {\n          by: this.board.dimensions.height,\n          max: true\n        },\n        left: {\n          by: this.board.dimensions.width,\n          max: true\n        },\n        right: {\n          by: this.board.dimensions.width,\n          max: true\n        }\n      },\n      knight: {\n        forward: {\n          by: 2,\n          exact: true\n        },\n        back: {\n          by: 2,\n          exact: true\n        },\n        left: {\n          by: 1,\n          exact: true\n        },\n        right: {\n          by: 1,\n          exact: true\n        }\n      },\n      bishop: {\n        forward: {\n          by: this.board.dimensions.height,\n          max: true\n        },\n        back: {\n          by: this.board.dimensions.height,\n          max: true\n        },\n        left: {\n          by: this.board.dimensions.width,\n          max: true\n        },\n        right: {\n          by: this.board.dimensions.width,\n          max: true\n        }\n      },\n      king: {\n        forward: {\n          by: 1,\n          exact: true\n        },\n        back: {\n          by: 1,\n          exact: true\n        },\n        left: {\n          by: 1,\n          exact: true,\n          specialCase: 1\n        },\n        right: {\n          by: 1,\n          exact: true,\n          specialCase: 1\n        }\n      },\n      queen: {\n        forward: {\n          by: this.board.dimensions.height,\n          max: true\n        },\n        back: {\n          by: this.board.dimensions.height,\n          max: true\n        },\n        left: {\n          by: this.board.dimensions.width,\n          max: true\n        },\n        right: {\n          by: this.board.dimensions.width,\n          max: true\n        }\n      }\n    };\n    this.state = {\n      turn: 'Whites',\n      initialSet: {\n        whitesOnTop: {\n          'A1': 'white-rook',\n          'B1': 'white-knight',\n          'C1': 'white-bishop',\n          'D1': 'white-queen',\n          'E1': 'white-king',\n          'F1': 'white-bishop',\n          'G1': 'white-knight',\n          'H1': 'white-rook',\n          'A2': 'white-pawn',\n          'B2': 'white-pawn',\n          'C2': 'white-pawn',\n          'D2': 'white-pawn',\n          'E2': 'white-pawn',\n          'F2': 'white-pawn',\n          'G2': 'white-pawn',\n          'H2': 'white-pawn',\n          'A7': 'black-pawn',\n          'B7': 'black-pawn',\n          'C7': 'black-pawn',\n          'D7': 'black-pawn',\n          'E7': 'black-pawn',\n          'F7': 'black-pawn',\n          'G7': 'black-pawn',\n          'H7': 'black-pawn',\n          'A8': 'black-rook',\n          'B8': 'black-knight',\n          'C8': 'black-bishop',\n          'D8': 'black-king',\n          'E8': 'black-queen',\n          'F8': 'black-bishop',\n          'G8': 'black-knight',\n          'H8': 'black-rook'\n        },\n        blacksOnTop: {\n          'A1': 'black-rook',\n          'B1': 'black-knight',\n          'C1': 'black-bishop',\n          'D1': 'black-queen',\n          'E1': 'black-king',\n          'F1': 'black-bishop',\n          'G1': 'black-knight',\n          'H1': 'black-rook',\n          'A2': 'black-pawn',\n          'B2': 'black-pawn',\n          'C2': 'black-pawn',\n          'D2': 'black-pawn',\n          'E2': 'black-pawn',\n          'F2': 'black-pawn',\n          'G2': 'black-pawn',\n          'H2': 'black-pawn',\n          'A7': 'white-pawn',\n          'B7': 'white-pawn',\n          'C7': 'white-pawn',\n          'D7': 'white-pawn',\n          'E7': 'white-pawn',\n          'F7': 'white-pawn',\n          'G7': 'white-pawn',\n          'H7': 'white-pawn',\n          'A8': 'white-rook',\n          'B8': 'white-knight',\n          'C8': 'white-bishop',\n          'D8': 'white-king',\n          'E8': 'white-queen',\n          'F8': 'white-bishop',\n          'G8': 'white-knight',\n          'H8': 'white-rook'\n        }\n      },\n      situation: [],\n      movesHistory: [],\n      initialSetType: 'blacksOnTop'\n    };\n    this.recordMove = this.recordMove.bind(this);\n    this.updateSituation = this.updateSituation.bind(this);\n    this.findRankNumber = this.findRankNumber.bind(this);\n    this.findFileNumber = this.findFileNumber.bind(this);\n    this.updateSituationByMoveId = this.updateSituationByMoveId.bind(this);\n  }\n\n  findSquare(situation, coordinates) {\n    for (let row of situation) {\n      for (let square of row) {\n        if (square.coordinates === coordinates) {\n          return square;\n        }\n      }\n    }\n  }\n\n  findRankNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n\n        if (square.coordinates === bySquareCoordinates) {\n          return i;\n        }\n      }\n    }\n  }\n\n  findFileNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n\n        if (square.coordinates === bySquareCoordinates) {\n          return j;\n        }\n      }\n    }\n  }\n\n  recordMove(moves) {\n    let i = 0;\n\n    function recordMove(move, callback) {\n      this.setState(state => {\n        this.findSquare(state.situation, move.from).piece = null;\n        const movedPiece = \"\".concat(this.turnMap[move.side]).concat(this.piecesMap[move.piece]);\n        this.findSquare(state.situation, move.to).piece = movedPiece;\n        state.movesHistory.push({\n          id: \"\".concat(move.id),\n          situation: state.situation\n        });\n        return {\n          situation: state.situation,\n          movesHistory: state.movesHistory\n        };\n      }, () => {\n        if (i < moves.length) callback(move, callback);\n      });\n    }\n\n    recordMove(moves[0], recordMove(move[i]));\n    i++;\n  }\n\n  findSituation(moveId) {\n    for (let move of this.state.movesHistory) if (move.id === moveId.toString()) return move.situation;\n  }\n\n  updateSituation(situation) {\n    this.setState({\n      situation: situation\n    });\n  }\n\n  updateSituationByMoveId(id) {\n    // console.log(this.findSituation(id))\n    this.updateSituation(this.findSituation(id));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.board,\n      initialSet: this.state.initialSet,\n      initialSetType: this.state.initialSetType,\n      situation: this.state.situation,\n      updateSituation: this.updateSituation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Panel, {\n      side: this.state.turn,\n      recordMove: this.recordMove,\n      situation: this.state.situation,\n      updateSituationByMoveId: this.updateSituationByMoveId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/App.js"],"names":["React","Board","Panel","App","Component","constructor","props","board","vCoordinates","hCoordinates","dimensions","width","height","turnMap","piecesMap","piecesMovement","pawn","forward","by","exact","back","left","specialCase","right","rook","max","knight","bishop","king","queen","state","turn","initialSet","whitesOnTop","blacksOnTop","situation","movesHistory","initialSetType","recordMove","bind","updateSituation","findRankNumber","findFileNumber","updateSituationByMoveId","findSquare","coordinates","row","square","bySquareCoordinates","i","length","j","moves","move","callback","setState","from","piece","movedPiece","side","to","push","id","findSituation","moveId","toString","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Board from './Board';\nimport './App.css';\nimport Panel from './Panel';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.board = {\n      vCoordinates: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],\n      hCoordinates: ['1', '2', '3', '4', '5', '6', '7', '8'],\n      dimensions: { width: 8, height: 8 }\n    }\n    this.turnMap = {'Whites': 'white-', 'Blacks': 'black-'}\n    this.piecesMap = {\n      'R': 'rook',\n      'N': 'knight',\n      'B': 'bishop',\n      'K': 'king',\n      'Q': 'queen',\n      'P': 'pawn'\n    }\n    this.piecesMovement = {\n      pawn: {\n        forward: {by: 1, exact: true}, \n        back: {by: null}, \n        left: {by: 1, exact: true, specialCase: 'captures'}, \n        right: {by: 1, exact: true, specialCase: 'captures'}\n      },\n      rook: {\n        forward: {by: this.board.dimensions.height, max: true}, \n        back: {by: this.board.dimensions.height, max: true}, \n        left: {by: this.board.dimensions.width, max: true}, \n        right: {by: this.board.dimensions.width, max: true}\n      },\n      knight: {\n        forward: {by: 2, exact: true}, \n        back: {by: 2, exact: true}, \n        left: {by: 1, exact: true}, \n        right: {by: 1, exact: true}\n      },\n      bishop: {\n        forward: {by: this.board.dimensions.height, max: true}, \n        back: {by: this.board.dimensions.height, max: true}, \n        left: {by: this.board.dimensions.width, max: true}, \n        right: {by: this.board.dimensions.width, max: true}\n      },\n      king: {\n        forward: {by: 1, exact: true}, \n        back: {by: 1, exact: true}, \n        left: {by: 1, exact: true, specialCase: 1}, \n        right: {by: 1, exact: true, specialCase: 1}\n      },\n      queen: {\n        forward: {by: this.board.dimensions.height, max: true}, \n        back: {by: this.board.dimensions.height, max: true}, \n        left: {by: this.board.dimensions.width, max: true}, \n        right: {by: this.board.dimensions.width, max: true}\n      }\n    }\n    this.state = {\n      turn: 'Whites',\n      initialSet: {\n        whitesOnTop: {'A1': 'white-rook', 'B1': 'white-knight', 'C1': 'white-bishop', 'D1': 'white-queen', 'E1': 'white-king', 'F1': 'white-bishop', 'G1': 'white-knight', 'H1': 'white-rook', \n                      'A2': 'white-pawn', 'B2': 'white-pawn', 'C2': 'white-pawn', 'D2': 'white-pawn', 'E2': 'white-pawn', 'F2': 'white-pawn', 'G2': 'white-pawn', 'H2': 'white-pawn',\n                      'A7': 'black-pawn', 'B7': 'black-pawn', 'C7': 'black-pawn', 'D7': 'black-pawn', 'E7': 'black-pawn', 'F7': 'black-pawn', 'G7': 'black-pawn', 'H7': 'black-pawn',\n                      'A8': 'black-rook', 'B8': 'black-knight', 'C8': 'black-bishop', 'D8': 'black-king', 'E8': 'black-queen', 'F8': 'black-bishop', 'G8': 'black-knight', 'H8': 'black-rook'}, \n        \n        blacksOnTop: {'A1': 'black-rook', 'B1': 'black-knight', 'C1': 'black-bishop', 'D1': 'black-queen', 'E1': 'black-king', 'F1': 'black-bishop', 'G1': 'black-knight', 'H1': 'black-rook', \n                      'A2': 'black-pawn', 'B2': 'black-pawn', 'C2': 'black-pawn', 'D2': 'black-pawn', 'E2': 'black-pawn', 'F2': 'black-pawn', 'G2': 'black-pawn', 'H2': 'black-pawn',\n                      'A7': 'white-pawn', 'B7': 'white-pawn', 'C7': 'white-pawn', 'D7': 'white-pawn', 'E7': 'white-pawn', 'F7': 'white-pawn', 'G7': 'white-pawn', 'H7': 'white-pawn',\n                      'A8': 'white-rook', 'B8': 'white-knight', 'C8': 'white-bishop', 'D8': 'white-king', 'E8': 'white-queen', 'F8': 'white-bishop', 'G8': 'white-knight', 'H8': 'white-rook'}, \n      },\n      situation: [],\n      movesHistory: [],\n      initialSetType: 'blacksOnTop'\n    }\n\n    this.recordMove = this.recordMove.bind(this);\n    this.updateSituation = this.updateSituation.bind(this);\n    this.findRankNumber = this.findRankNumber.bind(this);\n    this.findFileNumber = this.findFileNumber.bind(this);\n    this.updateSituationByMoveId = this.updateSituationByMoveId.bind(this);\n  }\n\n  findSquare(situation, coordinates) {\n    for (let row of situation) {\n      for (let square of row) {\n        if (square.coordinates === coordinates) {\n          return square;\n        }\n      }\n    }\n  }\n\n  findRankNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n        if (square.coordinates === bySquareCoordinates) {\n          return i;\n        }\n      }\n    }\n  }\n\n  findFileNumber(bySquareCoordinates) {\n    for (let i = 0; i < this.state.situation.length; i++) {\n      const row = this.state.situation[i];\n      for (let j = 0; j < row; j++) {\n        const square = row[j];\n        if (square.coordinates === bySquareCoordinates) {\n          return j;\n        }\n      }\n    }\n  }\n\n  recordMove(moves) {\n    let i = 0;\n    function recordMove(move, callback) {\n      this.setState(state => {\n        this.findSquare(state.situation, move.from).piece = null;\n        const movedPiece = `${this.turnMap[move.side]}${this.piecesMap[move.piece]}`;\n        this.findSquare(state.situation, move.to).piece = movedPiece;\n        state.movesHistory.push({id: `${move.id}`, situation: state.situation});\n        return {situation: state.situation, movesHistory: state.movesHistory};\n      }, () => {if (i < moves.length) callback(move, callback)});\n    }\n    recordMove(moves[0], recordMove(move[i]));\n    i++;\n  }\n\n  findSituation(moveId) {\n    for (let move of this.state.movesHistory)\n      if (move.id === moveId.toString())\n        return move.situation;\n  }\n\n  updateSituation(situation) {\n    this.setState({situation: situation});\n  }\n\n  updateSituationByMoveId(id) {\n    // console.log(this.findSituation(id))\n    this.updateSituation(this.findSituation(id));\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Board board={this.board} \n               initialSet={this.state.initialSet}\n               initialSetType={this.state.initialSetType} \n               situation={this.state.situation}\n               updateSituation={this.updateSituation} />\n        <Panel side={this.state.turn}\n               recordMove={this.recordMove} \n               situation={this.state.situation}\n               updateSituationByMoveId={this.updateSituationByMoveId} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}