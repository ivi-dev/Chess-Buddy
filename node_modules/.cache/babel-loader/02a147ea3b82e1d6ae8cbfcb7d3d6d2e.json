{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Panel.js\";\nimport React from 'react';\nimport Input from './Input';\nimport Buttons from './Buttons';\nimport SessionsPanel from './SessionsPanel';\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.notationMinLength = 5;\n    this.notationMaxLength = 5;\n    this.state = {\n      moves: [],\n      notation: '',\n      error: '',\n      sessionsPanelVisible: false\n    };\n    this.updateNotation = this.updateNotation.bind(this);\n    this.addNotation = this.addNotation.bind(this);\n    this.validateNotation = this.validateNotation.bind(this);\n    this.openSessionsPanel = this.openSessionsPanel.bind(this);\n  }\n\n  updateNotation(event) {\n    this.setState({\n      error: ''\n    });\n    let notation = event.target.value.trim();\n\n    if (notation.length > 0) {\n      const split = notation.split('');\n      split[0] = split[0].toUpperCase();\n      if (notation.length === 2) split[1] = split[1].toLowerCase();\n      if (notation.length === 4) split[3] = split[3].toLowerCase();\n      this.setState({\n        notation: split.join('')\n      });\n    } else {\n      this.setState({\n        notation: notation\n      });\n    }\n  }\n\n  validateNotation(notation) {\n    const minLength = this.notationMinLength,\n          maxLength = this.notationMaxLength;\n\n    function checkLength() {\n      return notation.length >= minLength && notation.length <= maxLength;\n    }\n\n    function checkComposition() {\n      return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n    }\n\n    function checkLegality() {\n      return true;\n    }\n\n    return checkLength() && checkComposition() && checkLegality();\n  }\n\n  getLatestMoveId() {\n    if (this.state.moves.length === 0) return -1;else return this.state.moves[0].id;\n  }\n\n  addNotation(event) {\n    event.preventDefault();\n\n    if (this.state.notation.trim().length > 0) {\n      if (this.validateNotation(this.state.notation)) {\n        this.setState(state => {\n          state.moves.unshift({\n            id: this.getLatestMoveId() + 1,\n            notation: this.state.notation,\n            side: this.props.side\n          });\n          return {\n            moves: state.moves\n          };\n        }, () => {\n          this.setState({\n            notation: ''\n          });\n          this.props.makeMove(this.state.notation);\n        });\n      } else {\n        this.setState({\n          error: 'Invalid notation'\n        });\n      }\n    }\n  }\n\n  openSessionsPanel() {\n    this.setState({\n      sessionsPanelVisible: true\n    });\n  }\n\n  render() {\n    return React.createElement(\"aside\", {\n      id: \"Panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Input, {\n      value: this.state.notation,\n      updateNotation: this.updateNotation,\n      addNotation: this.addNotation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), this.state.error && React.createElement(\"div\", {\n      id: \"Error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.error), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.moves.length !== 0 && 'Session History'), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(MovesHistory, {\n      moves: this.state.moves,\n      side: this.props.side,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Buttons, {\n      openSessionsPanel: this.openSessionsPanel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(SessionsPanel, {\n      visible: this.state.sessionsPanelVisible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Panel;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Panel.js"],"names":["React","Input","Buttons","SessionsPanel","MovesHistory","Panel","Component","constructor","props","notationMinLength","notationMaxLength","state","moves","notation","error","sessionsPanelVisible","updateNotation","bind","addNotation","validateNotation","openSessionsPanel","event","setState","target","value","trim","length","split","toUpperCase","toLowerCase","join","minLength","maxLength","checkLength","checkComposition","match","checkLegality","getLatestMoveId","id","preventDefault","unshift","side","makeMove","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Input from './Input'\nimport Buttons from './Buttons'\nimport SessionsPanel from './SessionsPanel'\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\n\nclass Panel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.notationMinLength = 5;\n        this.notationMaxLength = 5;\n        this.state = {\n            moves: [],\n            notation: '',\n            error: '',\n            sessionsPanelVisible: false\n        }\n        this.updateNotation = this.updateNotation.bind(this);\n        this.addNotation = this.addNotation.bind(this);\n        this.validateNotation = this.validateNotation.bind(this);\n        this.openSessionsPanel = this.openSessionsPanel.bind(this);\n    }\n\n    updateNotation(event) {\n        this.setState({error: ''});\n        let notation = event.target.value.trim();\n        if (notation.length > 0) {\n            const split = notation.split('');\n            split[0] = split[0].toUpperCase();\n            if (notation.length === 2)\n                split[1] = split[1].toLowerCase();\n            if (notation.length === 4)\n                split[3] = split[3].toLowerCase();\n            this.setState({notation: split.join('')});\n        } else {\n            this.setState({notation: notation});\n        }\n    }\n\n    validateNotation(notation) {\n        const minLength = this.notationMinLength, maxLength = this.notationMaxLength;\n        function checkLength() {\n            return notation.length >= minLength && notation.length <= maxLength;\n        }\n        function checkComposition() {\n            return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n        }\n        function checkLegality() {\n            return true;\n        }\n        return checkLength() && checkComposition() && checkLegality();\n    }\n\n    getLatestMoveId() {\n        if (this.state.moves.length === 0)\n            return -1;\n        else\n            return this.state.moves[0].id;\n    }\n\n    addNotation(event) {\n        event.preventDefault();\n        if (this.state.notation.trim().length > 0) {\n            if (this.validateNotation(this.state.notation)) {\n                this.setState(state => {\n                    state.moves.unshift({id: this.getLatestMoveId() + 1, notation: this.state.notation, side: this.props.side}); \n                    return {moves: state.moves}\n                }, () => {this.setState({notation: ''}); this.props.makeMove(this.state.notation)});\n            } else {\n                this.setState({error: 'Invalid notation'});\n            }\n        }\n    }\n\n    openSessionsPanel() {\n        this.setState({sessionsPanelVisible: true});\n    }\n\n    render() {\n        return (\n            <aside id=\"Panel\">\n                <Input value={this.state.notation} updateNotation={this.updateNotation} addNotation={this.addNotation} />\n                {this.state.error && <div id=\"Error\">{this.state.error}</div>}\n                <h3>{this.state.moves.length !== 0 && 'Session History'}</h3>\n                <hr />\n                <MovesHistory moves={this.state.moves} side={this.props.side} />\n                <Buttons openSessionsPanel={this.openSessionsPanel} />\n                <SessionsPanel visible={this.state.sessionsPanelVisible} />\n            </aside>\n        );\n    }\n}\n\nexport default Panel;"]},"metadata":{},"sourceType":"module"}