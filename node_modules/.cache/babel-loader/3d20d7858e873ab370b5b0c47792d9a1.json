{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Panel.js\";\nimport React from 'react';\nimport Input from './Input';\nimport Buttons from './Buttons';\nimport SessionsPanel from './SessionsPanel';\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\nimport PouchDB from 'pouchdb-browser';\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.notationMinLength = 5;\n    this.notationMaxLength = 5;\n    this.state = {\n      moves: [],\n      notationsList: '',\n      error: '',\n      sessionsPanelVisible: false\n    };\n    this.updateNotationsList = this.updateNotationsList.bind(this);\n    this.parseNotationsList = this.parseNotationsList.bind(this);\n    this.openSessionsPanel = this.openSessionsPanel.bind(this);\n    this.hideSessionsPanel = this.hideSessionsPanel.bind(this);\n    this.fadeOutMoves = this.fadeOutMoves.bind(this);\n    this.resetMovesFade = this.resetMovesFade.bind(this);\n  }\n\n  componentDidMount() {\n    const db = PouchDB('http//localhost:5984/chess-moves-parser');\n    db.info().then(function (info) {\n      console.log(info);\n    });\n  }\n\n  updateNotationsList(event) {\n    this.setState({\n      error: ''\n    });\n    this.setState({\n      notationsList: event.target.value\n    });\n  }\n\n  validateNotation(notation) {\n    const minLength = this.notationMinLength,\n          maxLength = this.notationMaxLength;\n\n    function checkLength() {\n      return notation.length >= minLength && notation.length <= maxLength;\n    }\n\n    function checkComposition() {\n      return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n    }\n\n    return checkLength() && checkComposition();\n  }\n\n  generateId(collection) {\n    if (collection.length === 0) return 1;else return collection[0].id + 1;\n  }\n\n  capitalize(notation) {\n    const split = notation.split('');\n    let capitalizedSplit = [];\n    split.forEach((letter, index) => {\n      if (index === 0) capitalizedSplit.push(letter.toUpperCase());else capitalizedSplit.push(letter.toLowerCase());\n    });\n    return capitalizedSplit.join('');\n  }\n\n  disectNotation(notation) {\n    const split = notation.split('');\n    return {\n      piece: split[0].toUpperCase(),\n      from: (split[1] + split[2]).toUpperCase(),\n      to: (split[3] + split[4]).toUpperCase()\n    };\n  }\n\n  parseNotationsList(event) {\n    event.preventDefault();\n\n    if (this.state.notationsList.length > 0) {\n      const notations = this.state.notationsList.split(/\\n/);\n      let allNotationsValid = true;\n\n      for (let notation of notations) if (!this.validateNotation(notation.replace(/\\s*/g, ''))) {\n        allNotationsValid = false;\n        this.setState({\n          error: \"Invalid notation: '\".concat(notation, \"'\")\n        });\n        break;\n      }\n\n      if (allNotationsValid) {\n        let moves = [];\n\n        for (let notation of notations) {\n          const prettyNotation = this.capitalize(notation.replace(/\\s*/g, ''));\n          const id = this.generateId(moves);\n          const moveData = this.disectNotation(notation);\n          const move = {\n            id: id,\n            notation: prettyNotation,\n            piece: moveData.piece,\n            from: moveData.from,\n            to: moveData.to,\n            side: id % 2 === 0 ? 'Blacks' : 'Whites',\n            faded: false\n          };\n          moves.unshift(move);\n        }\n\n        this.props.recordMoves(moves);\n        this.setState({\n          moves: moves\n        }, () => this.setState({\n          notationsList: ''\n        }));\n      }\n    }\n  }\n\n  openSessionsPanel() {\n    this.setState({\n      sessionsPanelVisible: true\n    });\n  }\n\n  hideSessionsPanel() {\n    this.setState({\n      sessionsPanelVisible: false\n    });\n  }\n\n  fadeOutMoves(upwardsFromMove) {\n    this.setState(state => {\n      state.moves.forEach(move => {\n        if (move.id > upwardsFromMove) move.faded = true;else move.faded = false;\n      });\n      return {\n        moves: state.moves\n      };\n    });\n  }\n\n  resetMovesFade() {\n    this.setState(state => {\n      state.moves.forEach(move => move.faded = false);\n      return {\n        moves: state.moves\n      };\n    });\n  }\n\n  render() {\n    return React.createElement(\"aside\", {\n      id: \"Panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Input, {\n      notationsList: this.state.notationsList,\n      updateNotationsList: this.updateNotationsList,\n      parseNotationsList: this.parseNotationsList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), this.state.error && React.createElement(\"div\", {\n      id: \"Error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.error), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.state.moves.length !== 0 && 'Session History'), this.state.error && React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(MovesHistory, {\n      moves: this.state.moves,\n      side: this.props.side,\n      updateSituationByMoveId: this.props.updateSituationByMoveId,\n      fadeOutMoves: this.fadeOutMoves,\n      resetMovesFade: this.resetMovesFade,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(Buttons, {\n      openSessionsPanel: this.openSessionsPanel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(SessionsPanel, {\n      visible: this.state.sessionsPanelVisible,\n      hideSessionsPanel: this.hideSessionsPanel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Panel;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Panel.js"],"names":["React","Input","Buttons","SessionsPanel","MovesHistory","PouchDB","Panel","Component","constructor","props","notationMinLength","notationMaxLength","state","moves","notationsList","error","sessionsPanelVisible","updateNotationsList","bind","parseNotationsList","openSessionsPanel","hideSessionsPanel","fadeOutMoves","resetMovesFade","componentDidMount","db","info","then","console","log","event","setState","target","value","validateNotation","notation","minLength","maxLength","checkLength","length","checkComposition","match","generateId","collection","id","capitalize","split","capitalizedSplit","forEach","letter","index","push","toUpperCase","toLowerCase","join","disectNotation","piece","from","to","preventDefault","notations","allNotationsValid","replace","prettyNotation","moveData","move","side","faded","unshift","recordMoves","upwardsFromMove","render","updateSituationByMoveId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Input from './Input'\nimport Buttons from './Buttons'\nimport SessionsPanel from './SessionsPanel'\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\nimport PouchDB from 'pouchdb-browser';\n\nclass Panel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.notationMinLength = 5;\n        this.notationMaxLength = 5;\n        this.state = {\n            moves: [],\n            notationsList: '',\n            error: '',\n            sessionsPanelVisible: false\n        }\n        this.updateNotationsList = this.updateNotationsList.bind(this);\n        this.parseNotationsList = this.parseNotationsList.bind(this);\n        this.openSessionsPanel = this.openSessionsPanel.bind(this);\n        this.hideSessionsPanel = this.hideSessionsPanel.bind(this);\n        this.fadeOutMoves = this.fadeOutMoves.bind(this);\n        this.resetMovesFade = this.resetMovesFade.bind(this);\n    }\n\n    componentDidMount() {\n        const db = PouchDB('http//localhost:5984/chess-moves-parser');\n        db.info().then(function (info) {\n            console.log(info);\n          });\n    }\n\n    updateNotationsList(event) {\n        this.setState({error: ''});\n        this.setState({notationsList: event.target.value});\n    }\n\n    validateNotation(notation) {\n        const minLength = this.notationMinLength, maxLength = this.notationMaxLength;\n        function checkLength() {\n            return notation.length >= minLength && notation.length <= maxLength;\n        }\n        function checkComposition() {\n            return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n        }\n        return checkLength() && checkComposition();\n    }\n\n    generateId(collection) {\n        if (collection.length === 0)\n            return 1;\n        else\n            return collection[0].id + 1;\n    }\n\n    capitalize(notation) {\n        const split = notation.split('');\n        let capitalizedSplit = [];\n        split.forEach((letter, index) => {if (index === 0) capitalizedSplit.push(letter.toUpperCase())\n                                          else capitalizedSplit.push(letter.toLowerCase())});\n        return capitalizedSplit.join('');\n    }\n\n    disectNotation(notation) {\n        const split = notation.split('');\n        return {piece: split[0].toUpperCase(), from: (split[1] + split[2]).toUpperCase(), \n                to: (split[3] + split[4]).toUpperCase()};\n    }\n\n    parseNotationsList(event) {\n        event.preventDefault();\n        if (this.state.notationsList.length > 0) {\n            const notations = this.state.notationsList.split(/\\n/);\n            let allNotationsValid = true;\n            for (let notation of notations)\n                if (!this.validateNotation(notation.replace(/\\s*/g, ''))) {\n                    allNotationsValid = false;\n                    this.setState({error: `Invalid notation: '${notation}'`});\n                    break;\n                }\n            if (allNotationsValid) {\n                let moves = [];\n                for (let notation of notations) {\n                    const prettyNotation = this.capitalize(notation.replace(/\\s*/g, ''));\n                    const id = this.generateId(moves);\n                    const moveData = this.disectNotation(notation);\n                    const move = {id: id, notation: prettyNotation, piece: moveData.piece,\n                                  from: moveData.from, to: moveData.to,\n                                  side: id % 2 === 0 ? 'Blacks' : 'Whites', \n                                  faded: false};\n                    moves.unshift(move);\n                }\n                this.props.recordMoves(moves);\n                this.setState({moves: moves}, () => this.setState({notationsList: ''}));\n            }\n        }\n    }\n\n    openSessionsPanel() {\n        this.setState({sessionsPanelVisible: true});\n    }\n\n    hideSessionsPanel() {\n        this.setState({sessionsPanelVisible: false});\n    }\n\n    fadeOutMoves(upwardsFromMove) {\n        this.setState(state => {\n            state.moves.forEach(move => {\n                if (move.id > upwardsFromMove) move.faded = true; \n                else move.faded = false;\n            });\n            return {moves: state.moves}\n        });\n    }\n\n    resetMovesFade() {\n        this.setState(state => {\n            state.moves.forEach(move => move.faded = false);\n            return {moves: state.moves}\n        });\n    }\n\n    render() {\n        return (\n            <aside id=\"Panel\">\n                <Input notationsList={this.state.notationsList} updateNotationsList={this.updateNotationsList} \n                       parseNotationsList={this.parseNotationsList} />\n                {this.state.error && <div id=\"Error\">{this.state.error}</div>}\n                <h3>{this.state.moves.length !== 0 && 'Session History'}</h3>\n                {this.state.error && <hr />}\n                <MovesHistory moves={this.state.moves} side={this.props.side} \n                              updateSituationByMoveId={this.props.updateSituationByMoveId} \n                              fadeOutMoves={this.fadeOutMoves} \n                              resetMovesFade={this.resetMovesFade} />\n                <Buttons openSessionsPanel={this.openSessionsPanel} />\n                <SessionsPanel visible={this.state.sessionsPanelVisible} hideSessionsPanel={this.hideSessionsPanel} />\n            </aside>\n        );\n    }\n}\n\nexport default Panel;"]},"metadata":{},"sourceType":"module"}