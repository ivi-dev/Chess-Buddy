{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Panel.js\";\nimport React from 'react';\nimport Input from './Input';\nimport Buttons from './Buttons';\nimport SessionsPanel from './SessionsPanel';\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.notationMinLength = 5;\n    this.notationMaxLength = 5;\n    this.state = {\n      moves: [],\n      notationsList: '',\n      error: '',\n      sessionsPanelVisible: false\n    };\n    this.updateNotationsList = this.updateNotationsList.bind(this);\n    this.parseNotationsList = this.parseNotationsList.bind(this);\n    this.openSessionsPanel = this.openSessionsPanel.bind(this);\n    this.hideSessionsPanel = this.hideSessionsPanel.bind(this);\n  }\n\n  updateNotationsList(event) {\n    this.setState({\n      error: ''\n    });\n    let notationsList = event.target.value.trim();\n\n    if (notationsList.length > 0) {\n      const split = notationsList.split('');\n      split[0] = split[0].toUpperCase();\n      if (notationsList.length === 2) split[1] = split[1].toLowerCase();\n      if (notationsList.length === 4) split[3] = split[3].toLowerCase();\n      this.setState({\n        notationsList: split.join('')\n      });\n    } else {\n      this.setState({\n        notationsList: notationsList\n      });\n    }\n  }\n\n  validateNotationsList(notationsList) {\n    const minLength = this.notationMinLength,\n          maxLength = this.notationMaxLength;\n\n    function checkLength(notation) {\n      return notation.length >= minLength && notation.length <= maxLength;\n    }\n\n    function checkComposition(notation) {\n      return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n    }\n\n    return true;\n  }\n\n  getLatestMoveId() {\n    if (this.state.moves.length === 0) return -1;else return this.state.moves[0].id;\n  }\n\n  disectNotation(notation) {\n    const split = notation.split('');\n    return {\n      piece: split[0],\n      from: split[1] + split[2],\n      to: split[3] + split[4]\n    };\n  }\n\n  parseNotationsList(event) {\n    event.preventDefault();\n    console.log(1);\n\n    if (this.state.notationsList.trim().length > 0) {\n      if (this.validateNotationsList(this.state.notationsList)) {\n        this.setState(state => {\n          const split = this.state.notationsList.split(/\\n/);\n          console.log(split); // state.moves.unshift({id: this.getLatestMoveId() + 1, notation: notation, side: side}); \n\n          return {\n            moves: state.moves\n          };\n        }, () => {\n          this.setState({\n            notation: ''\n          });\n          this.props.makeMove(this.disectNotation(this.state.notationsList));\n        });\n      } else {\n        this.setState({\n          error: 'Invalid notation'\n        });\n      }\n    }\n  }\n\n  openSessionsPanel() {\n    this.setState({\n      sessionsPanelVisible: true\n    });\n  }\n\n  hideSessionsPanel() {\n    this.setState({\n      sessionsPanelVisible: false\n    });\n  }\n\n  render() {\n    return React.createElement(\"aside\", {\n      id: \"Panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Input, {\n      notationsList: this.state.notationsList,\n      updateNotationsList: this.updateNotationsList,\n      parseNotationsList: this.parseNotationsList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), this.state.error && React.createElement(\"div\", {\n      id: \"Error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.state.error), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.moves.length !== 0 && 'Session History'), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(MovesHistory, {\n      moves: this.state.moves,\n      side: this.props.side,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Buttons, {\n      openSessionsPanel: this.openSessionsPanel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(SessionsPanel, {\n      visible: this.state.sessionsPanelVisible,\n      hideSessionsPanel: this.hideSessionsPanel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Panel;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Panel.js"],"names":["React","Input","Buttons","SessionsPanel","MovesHistory","Panel","Component","constructor","props","notationMinLength","notationMaxLength","state","moves","notationsList","error","sessionsPanelVisible","updateNotationsList","bind","parseNotationsList","openSessionsPanel","hideSessionsPanel","event","setState","target","value","trim","length","split","toUpperCase","toLowerCase","join","validateNotationsList","minLength","maxLength","checkLength","notation","checkComposition","match","getLatestMoveId","id","disectNotation","piece","from","to","preventDefault","console","log","makeMove","render","side"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Input from './Input'\nimport Buttons from './Buttons'\nimport SessionsPanel from './SessionsPanel'\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\n\nclass Panel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.notationMinLength = 5;\n        this.notationMaxLength = 5;\n        this.state = {\n            moves: [],\n            notationsList: '',\n            error: '',\n            sessionsPanelVisible: false\n        }\n        this.updateNotationsList = this.updateNotationsList.bind(this);\n        this.parseNotationsList = this.parseNotationsList.bind(this);\n        this.openSessionsPanel = this.openSessionsPanel.bind(this);\n        this.hideSessionsPanel = this.hideSessionsPanel.bind(this);\n    }\n\n    updateNotationsList(event) {\n        this.setState({error: ''});\n        let notationsList = event.target.value.trim();\n        if (notationsList.length > 0) {\n            const split = notationsList.split('');\n            split[0] = split[0].toUpperCase();\n            if (notationsList.length === 2)\n                split[1] = split[1].toLowerCase();\n            if (notationsList.length === 4)\n                split[3] = split[3].toLowerCase();\n            this.setState({notationsList: split.join('')});\n        } else {\n            this.setState({notationsList: notationsList});\n        }\n    }\n\n    validateNotationsList(notationsList) {\n        const minLength = this.notationMinLength, maxLength = this.notationMaxLength;\n        function checkLength(notation) {\n            return notation.length >= minLength && notation.length <= maxLength;\n        }\n        function checkComposition(notation) {\n            return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n        }\n        return true;\n    }\n\n    getLatestMoveId() {\n        if (this.state.moves.length === 0)\n            return -1;\n        else\n            return this.state.moves[0].id;\n    }\n\n    disectNotation(notation) {\n        const split = notation.split('');\n        return {piece: split[0], from: split[1] + split[2], to: split[3] + split[4]};\n    }\n\n    parseNotationsList(event) {\n        event.preventDefault();\n        console.log(1)\n\n        if (this.state.notationsList.trim().length > 0) {\n            if (this.validateNotationsList(this.state.notationsList)) {\n                this.setState(state => {\n                    const split = this.state.notationsList.split(/\\n/);\n                    console.log(split)\n                    // state.moves.unshift({id: this.getLatestMoveId() + 1, notation: notation, side: side}); \n                    return {moves: state.moves}\n                }, () => {this.setState({notation: ''}); this.props.makeMove(this.disectNotation(this.state.notationsList))});\n            } else {\n                this.setState({error: 'Invalid notation'});\n            }\n        }\n    }\n\n    openSessionsPanel() {\n        this.setState({sessionsPanelVisible: true});\n    }\n\n    hideSessionsPanel() {\n        this.setState({sessionsPanelVisible: false});\n    }\n\n    render() {\n        return (\n            <aside id=\"Panel\">\n                <Input notationsList={this.state.notationsList} updateNotationsList={this.updateNotationsList} parseNotationsList={this.parseNotationsList} />\n                {this.state.error && <div id=\"Error\">{this.state.error}</div>}\n                <h3>{this.state.moves.length !== 0 && 'Session History'}</h3>\n                <hr />\n                <MovesHistory moves={this.state.moves} side={this.props.side} />\n                <Buttons openSessionsPanel={this.openSessionsPanel} />\n                <SessionsPanel visible={this.state.sessionsPanelVisible} hideSessionsPanel={this.hideSessionsPanel} />\n            </aside>\n        );\n    }\n}\n\nexport default Panel;"]},"metadata":{},"sourceType":"module"}