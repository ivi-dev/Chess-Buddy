{"ast":null,"code":"var _jsxFileName = \"/Users/iliyanvidev/Code/chess-move-parser/src/Panel.js\";\nimport React from 'react';\nimport Input from './Input';\nimport Buttons from './Buttons';\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\nimport { tsThisType } from '@babel/types';\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.notationMinLength = 5;\n    this.notationMaxLength = 5;\n    this.state = {\n      moves: [],\n      notation: '',\n      notationIsValid: false,\n      error: ''\n    };\n    this.updateNotation = this.updateNotation.bind(this);\n    this.addNotation = this.addNotation.bind(this);\n    this.validateNotation = this.validateNotation.bind(this);\n  }\n\n  updateNotation(event) {\n    let notation = event.target.value.trim();\n\n    if (notation.length > 0) {\n      const split = notation.split('');\n      split[0] = split[0].toUpperCase();\n      if (notation.length === 2) split[1] = split[1].toLowerCase();\n      if (notation.length === 4) split[3] = split[3].toLowerCase();\n      this.setState({\n        notation: split.join('')\n      });\n    } else {\n      this.setState({\n        notation: notation\n      });\n    }\n  }\n\n  validateNotation(notation) {\n    const minLength = this.notationMinLength,\n          maxLength = this.notationMaxLength;\n\n    function checkLength() {\n      return notation.length >= minLength && notation.length <= maxLength;\n    }\n\n    function checkComposition() {\n      return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n    }\n\n    function checkLegality() {\n      return true;\n    }\n\n    return checkLength() && checkComposition() && checkLegality();\n  }\n\n  addNotation(event) {\n    event.preventDefault();\n\n    if (this.validateNotation(this.state.notation)) {\n      this.setState({\n        notationIsValid: true\n      });\n      this.setState(state => {\n        state.moves.unshift(this.state.notation);\n        return {\n          moves: state.moves\n        };\n      }, () => this.setState({\n        notation: ''\n      }));\n    } else {\n      this.setState({\n        notationIsValid: false\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"aside\", {\n      id: \"Panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Input, {\n      value: this.state.notation,\n      updateNotation: this.updateNotation,\n      addNotation: this.addNotation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), !this.state.notationIsValid && React.createElement(\"div\", {\n      id: \"Error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.error), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.moves.length !== 0 && 'Session History'), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(MovesHistory, {\n      moves: this.state.moves,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Buttons, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Panel;","map":{"version":3,"sources":["/Users/iliyanvidev/Code/chess-move-parser/src/Panel.js"],"names":["React","Input","Buttons","MovesHistory","tsThisType","Panel","Component","constructor","props","notationMinLength","notationMaxLength","state","moves","notation","notationIsValid","error","updateNotation","bind","addNotation","validateNotation","event","target","value","trim","length","split","toUpperCase","toLowerCase","setState","join","minLength","maxLength","checkLength","checkComposition","match","checkLegality","preventDefault","unshift","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Input from './Input'\nimport Buttons from './Buttons'\nimport './Panel.css';\nimport MovesHistory from './MovesHistory';\nimport { tsThisType } from '@babel/types';\n\nclass Panel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.notationMinLength = 5;\n        this.notationMaxLength = 5;\n        this.state = {\n            moves: [],\n            notation: '',\n            notationIsValid: false,\n            error: ''\n        }\n        this.updateNotation = this.updateNotation.bind(this);\n        this.addNotation = this.addNotation.bind(this);\n        this.validateNotation = this.validateNotation.bind(this);\n    }\n\n    updateNotation(event) {\n        let notation = event.target.value.trim();\n        if (notation.length > 0) {\n            const split = notation.split('');\n            split[0] = split[0].toUpperCase();\n            if (notation.length === 2)\n                split[1] = split[1].toLowerCase();\n            if (notation.length === 4)\n                split[3] = split[3].toLowerCase();\n            this.setState({notation: split.join('')});\n        } else {\n            this.setState({notation: notation});\n        }\n    }\n\n    validateNotation(notation) {\n        const minLength = this.notationMinLength, maxLength = this.notationMaxLength;\n        function checkLength() {\n            return notation.length >= minLength && notation.length <= maxLength;\n        }\n        function checkComposition() {\n            return notation.match(/^[A-Z-a-z]{1}[A-Z-a-z]{1}\\d{1}[A-Za-z]{1}\\d{1}/i);\n        }\n        function checkLegality() {\n            return true;\n        }\n        return checkLength() && checkComposition() && checkLegality();\n    }\n\n    addNotation(event) {\n        event.preventDefault();\n        if (this.validateNotation(this.state.notation)) {\n            this.setState({notationIsValid: true});\n            this.setState(state => {\n                state.moves.unshift(this.state.notation); \n                return {moves: state.moves}\n            }, () => this.setState({notation: ''}));\n        } else {\n            this.setState({notationIsValid: false});\n        }\n    }\n\n    render() {\n        return (\n            <aside id=\"Panel\">\n                <Input value={this.state.notation} updateNotation={this.updateNotation} addNotation={this.addNotation} />\n                {!this.state.notationIsValid && <div id=\"Error\">{this.state.error}</div>}\n                <h3>{this.state.moves.length !== 0 && 'Session History'}</h3>\n                <hr />\n                <MovesHistory moves={this.state.moves} />\n                <Buttons />\n            </aside>\n        );\n    }\n}\n\nexport default Panel;"]},"metadata":{},"sourceType":"module"}